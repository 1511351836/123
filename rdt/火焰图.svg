<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1269"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1269"> </text>
<g id="frames">
<g>
<title>all (270,734 samples, 100.00%)</title><rect x="10.0" y="1235.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1246.0">all</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc.so.6 (4,023 samples, 1.49%)</title><rect x="10.0" y="1219.0" width="17.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="1230.0"></text>
</g>
<g>
<title>java_start(Thread*) (4,022 samples, 1.49%)</title><rect x="10.0" y="1203.0" width="17.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="1214.0"></text>
</g>
<g>
<title>GCTaskThread::run() (1,759 samples, 0.65%)</title><rect x="10.0" y="1187.0" width="7.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="1198.0"></text>
</g>
<g>
<title>OldToYoungRootsTask::do_it(GCTaskManager*, unsigned int) (599 samples, 0.22%)</title><rect x="10.0" y="1171.0" width="2.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="1182.0"></text>
</g>
<g>
<title>CardTableExtension::scavenge_contents_parallel(ObjectStartArray*, MutableSpace*, HeapWord*, PSPromotionManager*, unsigned int, unsigned int) (597 samples, 0.22%)</title><rect x="10.0" y="1155.0" width="2.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="1166.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (315 samples, 0.12%)</title><rect x="11.3" y="1139.0" width="1.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.3" y="1150.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc.so.6 (165 samples, 0.06%)</title><rect x="11.4" y="1123.0" width="0.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="14.4" y="1134.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (108 samples, 0.04%)</title><rect x="12.2" y="1123.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.2" y="1134.0"></text>
</g>
<g>
<title>ScavengeRootsTask::do_it(GCTaskManager*, unsigned int) (58 samples, 0.02%)</title><rect x="12.6" y="1171.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.6" y="1182.0"></text>
</g>
<g>
<title>StealTask::do_it(GCTaskManager*, unsigned int) (740 samples, 0.27%)</title><rect x="12.9" y="1171.0" width="3.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.9" y="1182.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (240 samples, 0.09%)</title><rect x="13.0" y="1155.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.0" y="1166.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc.so.6 (147 samples, 0.05%)</title><rect x="13.1" y="1139.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="16.1" y="1150.0"></text>
</g>
<g>
<title>oopDesc* PSPromotionManager::copy_to_survivor_space&lt;false&gt;(oopDesc*) (67 samples, 0.02%)</title><rect x="13.8" y="1139.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.8" y="1150.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (162 samples, 0.06%)</title><rect x="14.1" y="1155.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="17.1" y="1166.0"></text>
</g>
<g>
<title>SpinPause (301 samples, 0.11%)</title><rect x="14.8" y="1155.0" width="1.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="17.8" y="1166.0"></text>
</g>
<g>
<title>ThreadRootsTask::do_it(GCTaskManager*, unsigned int) (355 samples, 0.13%)</title><rect x="16.1" y="1171.0" width="1.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.1" y="1182.0"></text>
</g>
<g>
<title>PSPromotionManager::drain_stacks_depth(bool) (331 samples, 0.12%)</title><rect x="16.2" y="1155.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="19.2" y="1166.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc.so.6 (289 samples, 0.11%)</title><rect x="16.3" y="1139.0" width="1.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="19.3" y="1150.0"></text>
</g>
<g>
<title>JavaThread::run() (2,144 samples, 0.79%)</title><rect x="17.7" y="1187.0" width="9.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="20.7" y="1198.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (2,144 samples, 0.79%)</title><rect x="17.7" y="1171.0" width="9.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="20.7" y="1182.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (2,120 samples, 0.78%)</title><rect x="17.7" y="1155.0" width="9.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="20.7" y="1166.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (2,017 samples, 0.75%)</title><rect x="17.7" y="1139.0" width="8.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="20.7" y="1150.0"></text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int) (1,867 samples, 0.69%)</title><rect x="17.7" y="1123.0" width="8.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="20.7" y="1134.0"></text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool) (1,864 samples, 0.69%)</title><rect x="17.7" y="1107.0" width="8.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="20.7" y="1118.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (740 samples, 0.27%)</title><rect x="17.7" y="1091.0" width="3.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="20.7" y="1102.0"></text>
</g>
<g>
<title>Matcher::match() (72 samples, 0.03%)</title><rect x="18.1" y="1075.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="21.1" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (539 samples, 0.20%)</title><rect x="18.6" y="1075.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="21.6" y="1086.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (70 samples, 0.03%)</title><rect x="19.1" y="1059.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="22.1" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (120 samples, 0.04%)</title><rect x="19.4" y="1059.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="22.4" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (864 samples, 0.32%)</title><rect x="20.9" y="1091.0" width="3.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.9" y="1102.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool) (670 samples, 0.25%)</title><rect x="21.3" y="1075.0" width="2.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="24.3" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (525 samples, 0.19%)</title><rect x="21.6" y="1059.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (496 samples, 0.18%)</title><rect x="21.7" y="1043.0" width="2.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.7" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (480 samples, 0.18%)</title><rect x="21.7" y="1027.0" width="2.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="24.7" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) [clone .part.116] (437 samples, 0.16%)</title><rect x="21.9" y="1011.0" width="1.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="24.9" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (92 samples, 0.03%)</title><rect x="24.2" y="1075.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="27.2" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (86 samples, 0.03%)</title><rect x="24.2" y="1059.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="27.2" y="1070.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (217 samples, 0.08%)</title><rect x="24.8" y="1091.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="27.8" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (217 samples, 0.08%)</title><rect x="24.8" y="1075.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="27.8" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (216 samples, 0.08%)</title><rect x="24.8" y="1059.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="27.8" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (215 samples, 0.08%)</title><rect x="24.8" y="1043.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="27.8" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (214 samples, 0.08%)</title><rect x="24.8" y="1027.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.8" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (206 samples, 0.08%)</title><rect x="24.8" y="1011.0" width="0.9" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.8" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (148 samples, 0.05%)</title><rect x="24.9" y="995.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="27.9" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (148 samples, 0.05%)</title><rect x="24.9" y="979.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="27.9" y="990.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (145 samples, 0.05%)</title><rect x="24.9" y="963.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="27.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (141 samples, 0.05%)</title><rect x="24.9" y="947.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="27.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (138 samples, 0.05%)</title><rect x="24.9" y="931.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="27.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (132 samples, 0.05%)</title><rect x="24.9" y="915.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="27.9" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (90 samples, 0.03%)</title><rect x="25.0" y="899.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="28.0" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (90 samples, 0.03%)</title><rect x="25.0" y="883.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="28.0" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (86 samples, 0.03%)</title><rect x="25.0" y="867.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="28.0" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (86 samples, 0.03%)</title><rect x="25.0" y="851.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="28.0" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (85 samples, 0.03%)</title><rect x="25.0" y="835.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="28.0" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (82 samples, 0.03%)</title><rect x="25.0" y="819.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="28.0" y="830.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (62 samples, 0.02%)</title><rect x="25.0" y="803.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="28.0" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (62 samples, 0.02%)</title><rect x="25.0" y="787.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="28.0" y="798.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int) (140 samples, 0.05%)</title><rect x="25.8" y="1123.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="28.8" y="1134.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*) (140 samples, 0.05%)</title><rect x="25.8" y="1107.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="28.8" y="1118.0"></text>
</g>
<g>
<title>Compilation::compile_method() (139 samples, 0.05%)</title><rect x="25.8" y="1091.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="28.8" y="1102.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (124 samples, 0.05%)</title><rect x="25.8" y="1075.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="28.8" y="1086.0"></text>
</g>
<g>
<title>CompileQueue::get() (103 samples, 0.04%)</title><rect x="26.5" y="1139.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="29.5" y="1150.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (99 samples, 0.04%)</title><rect x="26.5" y="1123.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="29.5" y="1134.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (94 samples, 0.03%)</title><rect x="26.5" y="1107.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="29.5" y="1118.0"></text>
</g>
<g>
<title>VMThread::run() (82 samples, 0.03%)</title><rect x="27.0" y="1187.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="30.0" y="1198.0"></text>
</g>
<g>
<title>VMThread::loop() (82 samples, 0.03%)</title><rect x="27.0" y="1171.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="30.0" y="1182.0"></text>
</g>
<g>
<title>java/lang/Thread.run (54,928 samples, 20.29%)</title><rect x="27.7" y="1219.0" width="239.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="30.7" y="1230.0">java/lang/Thread.run</text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalRunnable.run (108 samples, 0.04%)</title><rect x="27.7" y="1203.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.7" y="1214.0"></text>
</g>
<g>
<title>io/netty/util/internal/ThreadExecutorMap$2.run (108 samples, 0.04%)</title><rect x="27.7" y="1187.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="30.7" y="1198.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor$4.run (108 samples, 0.04%)</title><rect x="27.7" y="1171.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="30.7" y="1182.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.run (108 samples, 0.04%)</title><rect x="27.7" y="1155.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="30.7" y="1166.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeys (68 samples, 0.03%)</title><rect x="27.7" y="1139.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="30.7" y="1150.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeysOptimized (68 samples, 0.03%)</title><rect x="27.7" y="1123.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.7" y="1134.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKey (68 samples, 0.03%)</title><rect x="27.7" y="1107.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="30.7" y="1118.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.read (66 samples, 0.02%)</title><rect x="27.7" y="1091.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="30.7" y="1102.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (54,429 samples, 20.10%)</title><rect x="28.1" y="1203.0" width="237.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.1" y="1214.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (54,429 samples, 20.10%)</title><rect x="28.1" y="1187.0" width="237.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="31.1" y="1198.0">java/util/concurrent/ThreadPool..</text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (187 samples, 0.07%)</title><rect x="28.2" y="1171.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.2" y="1182.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301 (187 samples, 0.07%)</title><rect x="28.2" y="1155.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.2" y="1166.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.runAndReset (187 samples, 0.07%)</title><rect x="28.2" y="1139.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.2" y="1150.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (186 samples, 0.07%)</title><rect x="28.2" y="1123.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/StateStore$MaintenanceTask$$anon$1.run (169 samples, 0.06%)</title><rect x="28.3" y="1107.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.3" y="1118.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/StateStore$$$Lambda$2455/1730997795.apply$mcV$sp (169 samples, 0.06%)</title><rect x="28.3" y="1091.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.3" y="1102.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/StateStore$.$anonfun$startMaintenanceIfNeeded$1 (169 samples, 0.06%)</title><rect x="28.3" y="1075.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.3" y="1086.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/StateStore$.doMaintenance (169 samples, 0.06%)</title><rect x="28.3" y="1059.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="31.3" y="1070.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayBuffer.foreach (169 samples, 0.06%)</title><rect x="28.3" y="1043.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="31.3" y="1054.0"></text>
</g>
<g>
<title>scala/collection/mutable/ResizableArray.foreach$ (169 samples, 0.06%)</title><rect x="28.3" y="1027.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.3" y="1038.0"></text>
</g>
<g>
<title>scala/collection/mutable/ResizableArray.foreach (169 samples, 0.06%)</title><rect x="28.3" y="1011.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/StateStore$$$Lambda$2746/892180588.apply (168 samples, 0.06%)</title><rect x="28.3" y="995.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/StateStore$.$anonfun$doMaintenance$2$adapted (167 samples, 0.06%)</title><rect x="28.3" y="979.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.3" y="990.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/StateStore$.$anonfun$doMaintenance$2 (167 samples, 0.06%)</title><rect x="28.3" y="963.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.3" y="974.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider.doMaintenance (133 samples, 0.05%)</title><rect x="28.3" y="947.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.3" y="958.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider.cleanup (60 samples, 0.02%)</title><rect x="28.3" y="931.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.3" y="942.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider.doSnapshot (73 samples, 0.03%)</title><rect x="28.5" y="931.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.5" y="942.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.timeTakenMs (64 samples, 0.02%)</title><rect x="28.6" y="915.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.6" y="926.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider$$Lambda$2747/823265809.apply (63 samples, 0.02%)</title><rect x="28.6" y="899.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.6" y="910.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider.$anonfun$doSnapshot$1 (63 samples, 0.02%)</title><rect x="28.6" y="883.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.6" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider.fetchFiles (63 samples, 0.02%)</title><rect x="28.6" y="867.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.6" y="878.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/AbstractFileContextBasedCheckpointFileManager.list (60 samples, 0.02%)</title><rect x="28.6" y="851.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.6" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/CheckpointFileManager.list$ (60 samples, 0.02%)</title><rect x="28.6" y="835.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.6" y="846.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/CheckpointFileManager.list (60 samples, 0.02%)</title><rect x="28.6" y="819.0" width="0.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="31.6" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/AbstractFileContextBasedCheckpointFileManager.list (60 samples, 0.02%)</title><rect x="28.6" y="803.0" width="0.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.6" y="814.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/FileContext$Util.listStatus (60 samples, 0.02%)</title><rect x="28.6" y="787.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.6" y="798.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/FileContext$Util.listStatus (60 samples, 0.02%)</title><rect x="28.6" y="771.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.6" y="782.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/FileContext$Util.listStatus (60 samples, 0.02%)</title><rect x="28.6" y="755.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.6" y="766.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/FSLinkResolver.resolve (60 samples, 0.02%)</title><rect x="28.6" y="739.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.6" y="750.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/FileContext$Util$1.next (59 samples, 0.02%)</title><rect x="28.6" y="723.0" width="0.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.6" y="734.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/FileContext$Util$1.next (59 samples, 0.02%)</title><rect x="28.6" y="707.0" width="0.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.6" y="718.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/ChecksumFs.listStatus (59 samples, 0.02%)</title><rect x="28.6" y="691.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.6" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/executor/Executor$TaskRunner.run (54,206 samples, 20.02%)</title><rect x="29.1" y="1171.0" width="236.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.1" y="1182.0">org/apache/spark/executor/Execu..</text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinally (54,169 samples, 20.01%)</title><rect x="29.2" y="1155.0" width="236.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="32.2" y="1166.0">org/apache/spark/util/Utils$.tr..</text>
</g>
<g>
<title>org/apache/spark/executor/Executor$TaskRunner$$Lambda$581/266585698.apply (54,168 samples, 20.01%)</title><rect x="29.2" y="1139.0" width="236.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.2" y="1150.0">org/apache/spark/executor/Execu..</text>
</g>
<g>
<title>org/apache/spark/executor/Executor$TaskRunner.$anonfun$run$3 (54,168 samples, 20.01%)</title><rect x="29.2" y="1123.0" width="236.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.2" y="1134.0">org/apache/spark/executor/Execu..</text>
</g>
<g>
<title>org/apache/spark/scheduler/Task.run (54,167 samples, 20.01%)</title><rect x="29.2" y="1107.0" width="236.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.2" y="1118.0">org/apache/spark/scheduler/Task..</text>
</g>
<g>
<title>org/apache/spark/TaskContext.runTaskWithListeners (54,156 samples, 20.00%)</title><rect x="29.2" y="1091.0" width="236.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="32.2" y="1102.0">org/apache/spark/TaskContext.ru..</text>
</g>
<g>
<title>org/apache/spark/scheduler/ResultTask.runTask (26,410 samples, 9.75%)</title><rect x="29.2" y="1075.0" width="115.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="32.2" y="1086.0">org/apache/spa..</text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.iterator (160 samples, 0.06%)</title><rect x="29.3" y="1059.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="32.3" y="1070.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.computeOrReadCheckpoint (160 samples, 0.06%)</title><rect x="29.3" y="1043.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.3" y="1054.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinHelper$StateStoreAwareZipPartitionsRDD.compute (160 samples, 0.06%)</title><rect x="29.3" y="1027.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.3" y="1038.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$$Lambda$2562/342123295.apply (160 samples, 0.06%)</title><rect x="29.3" y="1011.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec.$anonfun$doExecute$1$adapted (160 samples, 0.06%)</title><rect x="29.3" y="995.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="32.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec.$anonfun$doExecute$1 (160 samples, 0.06%)</title><rect x="29.3" y="979.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="32.3" y="990.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec.processPartitions (160 samples, 0.06%)</title><rect x="29.3" y="963.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.3" y="974.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$OneSideHashJoiner.&lt;init&gt; (125 samples, 0.05%)</title><rect x="29.4" y="947.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.4" y="958.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager.&lt;init&gt; (96 samples, 0.04%)</title><rect x="29.5" y="931.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="32.5" y="942.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$KeyWithIndexToValueStore.&lt;init&gt; (61 samples, 0.02%)</title><rect x="29.7" y="915.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="32.7" y="926.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/V2TableWriteExec$$Lambda$2563/392866522.apply (26,222 samples, 9.69%)</title><rect x="30.1" y="1059.0" width="114.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="33.1" y="1070.0">org/apache/spa..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/V2TableWriteExec.$anonfun$writeWithV2$2 (26,222 samples, 9.69%)</title><rect x="30.1" y="1043.0" width="114.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="33.1" y="1054.0">org/apache/spa..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataWritingSparkTask$.run (26,222 samples, 9.69%)</title><rect x="30.1" y="1027.0" width="114.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="33.1" y="1038.0">org/apache/spa..</text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinallyAndFailureCallbacks (26,222 samples, 9.69%)</title><rect x="30.1" y="1011.0" width="114.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.1" y="1022.0">org/apache/spa..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataWritingSparkTask$$$Lambda$2730/2042635234.apply (26,222 samples, 9.69%)</title><rect x="30.1" y="995.0" width="114.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.1" y="1006.0">org/apache/spa..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataWritingSparkTask$.$anonfun$run$1 (26,222 samples, 9.69%)</title><rect x="30.1" y="979.0" width="114.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="33.1" y="990.0">org/apache/spa..</text>
</g>
<g>
<title>org/apache/spark/util/CompletionIterator.hasNext (26,200 samples, 9.68%)</title><rect x="30.1" y="963.0" width="114.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.1" y="974.0">org/apache/spa..</text>
</g>
<g>
<title>org/apache/spark/util/CompletionIterator$$anon$1.completion (161 samples, 0.06%)</title><rect x="30.1" y="947.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.1" y="958.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$$Lambda$2729/48517034.apply$mcV$sp (161 samples, 0.06%)</title><rect x="30.1" y="931.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.1" y="942.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec.$anonfun$processPartitions$29 (161 samples, 0.06%)</title><rect x="30.1" y="915.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.1" y="926.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec.onOutputCompletion$1 (161 samples, 0.06%)</title><rect x="30.1" y="899.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.1" y="910.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec.timeTakenMs (161 samples, 0.06%)</title><rect x="30.1" y="883.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.1" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StateStoreWriter.timeTakenMs$ (161 samples, 0.06%)</title><rect x="30.1" y="867.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="33.1" y="878.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StateStoreWriter.timeTakenMs (161 samples, 0.06%)</title><rect x="30.1" y="851.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.1" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.timeTakenMs (161 samples, 0.06%)</title><rect x="30.1" y="835.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.1" y="846.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcV$sp.apply (161 samples, 0.06%)</title><rect x="30.1" y="819.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.1" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$$Lambda$2738/677717282.apply$mcV$sp (149 samples, 0.06%)</title><rect x="30.2" y="803.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.2" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec.$anonfun$processPartitions$27 (149 samples, 0.06%)</title><rect x="30.2" y="787.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.2" y="798.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$OneSideHashJoiner.commitStateAndGetMetrics (148 samples, 0.05%)</title><rect x="30.2" y="771.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.2" y="782.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager.commit (147 samples, 0.05%)</title><rect x="30.2" y="755.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="33.2" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$StateStoreHandler.commit (147 samples, 0.05%)</title><rect x="30.2" y="739.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.2" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider$HDFSBackedStateStore.commit (147 samples, 0.05%)</title><rect x="30.2" y="723.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.2" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider.org$apache$spark$sql$execution$streaming$state$HDFSBackedStateStoreProvider$$commitUpdates (108 samples, 0.04%)</title><rect x="30.3" y="707.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.3" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider.finalizeDeltaFile (107 samples, 0.04%)</title><rect x="30.3" y="691.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.3" y="702.0"></text>
</g>
<g>
<title>java/io/FilterOutputStream.close (107 samples, 0.04%)</title><rect x="30.3" y="675.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="33.3" y="686.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4BlockOutputStream.close (107 samples, 0.04%)</title><rect x="30.3" y="659.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.3" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/CheckpointFileManager$RenameBasedFSDataOutputStream.close (107 samples, 0.04%)</title><rect x="30.3" y="643.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.3" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/FileContextBasedCheckpointFileManager.renameTempFile (106 samples, 0.04%)</title><rect x="30.3" y="627.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.3" y="638.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/FileContext.rename (100 samples, 0.04%)</title><rect x="30.3" y="611.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.3" y="622.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/AbstractFileSystem.rename (100 samples, 0.04%)</title><rect x="30.3" y="595.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.3" y="606.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/ChecksumFs.renameInternal (100 samples, 0.04%)</title><rect x="30.3" y="579.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.3" y="590.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/AbstractFileSystem.rename (91 samples, 0.03%)</title><rect x="30.3" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.3" y="574.0"></text>
</g>
<g>
<title>org/apache/hadoop/fs/AbstractFileSystem.renameInternal (91 samples, 0.03%)</title><rect x="30.3" y="547.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.3" y="558.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (26,039 samples, 9.62%)</title><rect x="30.8" y="947.0" width="113.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="33.8" y="958.0">scala/collecti..</text>
</g>
<g>
<title>scala/collection/Iterator$ConcatIterator.hasNext (26,039 samples, 9.62%)</title><rect x="30.8" y="931.0" width="113.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="33.8" y="942.0">scala/collecti..</text>
</g>
<g>
<title>org/apache/spark/util/CompletionIterator.hasNext (26,023 samples, 9.61%)</title><rect x="30.9" y="915.0" width="113.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.9" y="926.0">org/apache/spa..</text>
</g>
<g>
<title>scala/collection/Iterator$ConcatIterator.hasNext (26,023 samples, 9.61%)</title><rect x="30.9" y="899.0" width="113.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="33.9" y="910.0">scala/collecti..</text>
</g>
<g>
<title>scala/collection/Iterator$$anon$11.hasNext (26,009 samples, 9.61%)</title><rect x="30.9" y="883.0" width="113.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.9" y="894.0">scala/collecti..</text>
</g>
<g>
<title>org/apache/spark/util/CompletionIterator.hasNext (2,204 samples, 0.81%)</title><rect x="30.9" y="867.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.9" y="878.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$12.hasNext (2,192 samples, 0.81%)</title><rect x="30.9" y="851.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.9" y="862.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (1,460 samples, 0.54%)</title><rect x="31.3" y="835.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.3" y="846.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$12.hasNext (1,438 samples, 0.53%)</title><rect x="31.4" y="819.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.4" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/util/NextIterator.hasNext (1,332 samples, 0.49%)</title><rect x="31.7" y="803.0" width="5.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.7" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$KeyWithIndexToValueStore$$anon$3.getNext (1,321 samples, 0.49%)</title><rect x="31.7" y="787.0" width="5.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.7" y="798.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$KeyWithIndexToValueStore$$anon$3.getNext (1,321 samples, 0.49%)</title><rect x="31.7" y="771.0" width="5.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="34.7" y="782.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider$HDFSBackedStateStore.get (486 samples, 0.18%)</title><rect x="31.8" y="755.0" width="2.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="34.8" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/NoPrefixHDFSBackedStateStoreMap.get (484 samples, 0.18%)</title><rect x="31.8" y="739.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (424 samples, 0.16%)</title><rect x="32.1" y="723.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="35.1" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.equals (206 samples, 0.08%)</title><rect x="32.6" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="35.6" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/array/ByteArrayMethods.arrayEquals (198 samples, 0.07%)</title><rect x="32.7" y="691.0" width="0.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="35.7" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.hashCode (101 samples, 0.04%)</title><rect x="33.5" y="707.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="36.5" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/hash/Murmur3_x86_32.hashUnsafeWords (62 samples, 0.02%)</title><rect x="33.7" y="691.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="36.7" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$KeyWithIndexToValueRowConverterFormatV2.convertValue (639 samples, 0.24%)</title><rect x="34.0" y="755.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="37.0" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (591 samples, 0.22%)</title><rect x="34.2" y="739.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="37.2" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.writeFields_0_0$ (237 samples, 0.09%)</title><rect x="34.4" y="723.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="37.4" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (237 samples, 0.09%)</title><rect x="34.4" y="707.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="37.4" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (237 samples, 0.09%)</title><rect x="34.4" y="691.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="37.4" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (237 samples, 0.09%)</title><rect x="34.4" y="675.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="37.4" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (67 samples, 0.02%)</title><rect x="35.0" y="659.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="38.0" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.writeFields_0_1$ (244 samples, 0.09%)</title><rect x="35.4" y="723.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="38.4" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (234 samples, 0.09%)</title><rect x="35.4" y="707.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="38.4" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (234 samples, 0.09%)</title><rect x="35.4" y="691.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="38.4" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.grow (89 samples, 0.03%)</title><rect x="35.5" y="675.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="38.5" y="686.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/BufferHolder.grow (89 samples, 0.03%)</title><rect x="35.5" y="659.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="38.5" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/array/ByteArrayMethods.roundNumberOfBytesToNearestWord (86 samples, 0.03%)</title><rect x="35.5" y="643.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="38.5" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/array/ByteArrayMethods.roundNumberOfBytesToNearestWord (86 samples, 0.03%)</title><rect x="35.5" y="627.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="38.5" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (134 samples, 0.05%)</title><rect x="35.9" y="675.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="38.9" y="686.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$KeyWithIndexToValueStore.org$apache$spark$sql$execution$streaming$state$SymmetricHashJoinStateManager$KeyWithIndexToValueStore$$keyWithIndexRow (167 samples, 0.06%)</title><rect x="36.7" y="755.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="39.7" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (92 samples, 0.03%)</title><rect x="37.0" y="739.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.0" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (92 samples, 0.03%)</title><rect x="37.0" y="723.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.0" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (92 samples, 0.03%)</title><rect x="37.0" y="707.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.0" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (92 samples, 0.03%)</title><rect x="37.0" y="691.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.0" y="702.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (634 samples, 0.23%)</title><rect x="37.6" y="835.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.6" y="846.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$$Lambda$2742/31848718.apply (567 samples, 0.21%)</title><rect x="37.8" y="819.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.8" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager.$anonfun$getJoinedRows$2 (554 samples, 0.20%)</title><rect x="37.9" y="803.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="40.9" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$$Lambda$2620/650403248.apply (536 samples, 0.20%)</title><rect x="37.9" y="787.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.9" y="798.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec.$anonfun$processPartitions$2$adapted (536 samples, 0.20%)</title><rect x="37.9" y="771.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.9" y="782.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec.$anonfun$processPartitions$2 (536 samples, 0.20%)</title><rect x="37.9" y="755.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.9" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificPredicate.eval (536 samples, 0.20%)</title><rect x="37.9" y="739.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.9" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificPredicate.And_0$ (536 samples, 0.20%)</title><rect x="37.9" y="723.0" width="2.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.9" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/util/DateTimeUtils.timestampAddDayTime (536 samples, 0.20%)</title><rect x="37.9" y="707.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.9" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/util/DateTimeUtils$.timestampAddDayTime (536 samples, 0.20%)</title><rect x="37.9" y="691.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.9" y="702.0"></text>
</g>
<g>
<title>java/time/Instant.atZone (200 samples, 0.07%)</title><rect x="37.9" y="675.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.9" y="686.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.ofInstant (200 samples, 0.07%)</title><rect x="37.9" y="659.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.9" y="670.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.create (200 samples, 0.07%)</title><rect x="37.9" y="643.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.9" y="654.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.ofEpochSecond (133 samples, 0.05%)</title><rect x="38.1" y="627.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="41.1" y="638.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.plus (163 samples, 0.06%)</title><rect x="38.8" y="675.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.8" y="686.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.plus (133 samples, 0.05%)</title><rect x="38.8" y="659.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="41.8" y="670.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.plusNanos (111 samples, 0.04%)</title><rect x="38.9" y="643.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.9" y="654.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.plusWithOverflow (111 samples, 0.04%)</title><rect x="38.9" y="627.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.9" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/util/DateTimeUtils$.microsToInstant (84 samples, 0.03%)</title><rect x="39.9" y="675.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.9" y="686.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (84 samples, 0.03%)</title><rect x="39.9" y="659.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="42.9" y="670.0"></text>
</g>
<g>
<title>java/time/Instant.create (84 samples, 0.03%)</title><rect x="39.9" y="643.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.9" y="654.0"></text>
</g>
<g>
<title>java/time/Instant.&lt;init&gt; (68 samples, 0.03%)</title><rect x="39.9" y="627.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="42.9" y="638.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$11.nextCur (23,692 samples, 8.75%)</title><rect x="40.6" y="867.0" width="103.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.6" y="878.0">scala/collec..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$OneSideHashJoiner$$Lambda$2720/1890922474.apply (23,692 samples, 8.75%)</title><rect x="40.6" y="851.0" width="103.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="43.6" y="862.0">org/apache/s..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$OneSideHashJoiner.$anonfun$storeAndJoinWithOtherSide$9 (23,692 samples, 8.75%)</title><rect x="40.6" y="835.0" width="103.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="43.6" y="846.0">org/apache/s..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$OneSideHashJoiner$AddingProcessedRowToStateCompletionIterator.&lt;init&gt; (23,688 samples, 8.75%)</title><rect x="40.6" y="819.0" width="103.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.6" y="830.0">org/apache/s..</text>
</g>
<g>
<title>org/apache/spark/util/CompletionIterator.hasNext (23,688 samples, 8.75%)</title><rect x="40.6" y="803.0" width="103.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="43.6" y="814.0">org/apache/s..</text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (79 samples, 0.03%)</title><rect x="40.7" y="787.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.7" y="798.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$12.hasNext (23,580 samples, 8.71%)</title><rect x="41.0" y="787.0" width="102.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="44.0" y="798.0">scala/collec..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$$Lambda$2743/1849270882.apply (87 samples, 0.03%)</title><rect x="42.2" y="771.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="45.2" y="782.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (15,794 samples, 5.83%)</title><rect x="42.6" y="771.0" width="68.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="45.6" y="782.0">scala/c..</text>
</g>
<g>
<title>itable stub (352 samples, 0.13%)</title><rect x="42.7" y="755.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="45.7" y="766.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$12.hasNext (15,378 samples, 5.68%)</title><rect x="44.4" y="755.0" width="67.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.4" y="766.0">scala/c..</text>
</g>
<g>
<title>itable stub (653 samples, 0.24%)</title><rect x="45.9" y="739.0" width="2.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="48.9" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/util/NextIterator.hasNext (13,829 samples, 5.11%)</title><rect x="48.8" y="739.0" width="60.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.8" y="750.0">org/ap..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$KeyWithIndexToValueStore$$anon$3.getNext (13,561 samples, 5.01%)</title><rect x="49.6" y="723.0" width="59.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.6" y="734.0">org/ap..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$KeyWithIndexToValueStore$$anon$3.getNext (13,561 samples, 5.01%)</title><rect x="49.6" y="707.0" width="59.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="52.6" y="718.0">org/ap..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider$HDFSBackedStateStore.get (5,261 samples, 1.94%)</title><rect x="50.3" y="691.0" width="22.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.3" y="702.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/NoPrefixHDFSBackedStateStoreMap.get (5,220 samples, 1.93%)</title><rect x="50.5" y="675.0" width="22.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="53.5" y="686.0">o..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (3,815 samples, 1.41%)</title><rect x="56.5" y="659.0" width="16.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.tabAt (127 samples, 0.05%)</title><rect x="59.6" y="643.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.6" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.equals (1,989 samples, 0.73%)</title><rect x="60.2" y="643.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.2" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/array/ByteArrayMethods.arrayEquals (1,885 samples, 0.70%)</title><rect x="60.7" y="627.0" width="8.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="63.7" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.getLong (129 samples, 0.05%)</title><rect x="68.3" y="611.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="71.3" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.hashCode (979 samples, 0.36%)</title><rect x="68.9" y="643.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="71.9" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/hash/Murmur3_x86_32.hashUnsafeWords (622 samples, 0.23%)</title><rect x="70.4" y="627.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="73.4" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/hash/Murmur3_x86_32.fmix (299 samples, 0.11%)</title><rect x="70.5" y="611.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="73.5" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/hash/Murmur3_x86_32.hashBytesByInt (303 samples, 0.11%)</title><rect x="71.8" y="611.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="74.8" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/hash/Murmur3_x86_32.mixH1 (164 samples, 0.06%)</title><rect x="72.3" y="595.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="75.3" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$KeyWithIndexToValueRowConverterFormatV2.convertValue (6,418 samples, 2.37%)</title><rect x="73.2" y="691.0" width="28.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="76.2" y="702.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (5,739 samples, 2.12%)</title><rect x="75.8" y="675.0" width="25.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="78.8" y="686.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.writeFields_0_0$ (2,463 samples, 0.91%)</title><rect x="77.8" y="659.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="80.8" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (2,304 samples, 0.85%)</title><rect x="78.5" y="643.0" width="10.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="81.5" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (2,304 samples, 0.85%)</title><rect x="78.5" y="627.0" width="10.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="81.5" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (2,304 samples, 0.85%)</title><rect x="78.5" y="611.0" width="10.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="81.5" y="622.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (613 samples, 0.23%)</title><rect x="84.5" y="595.0" width="2.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="87.5" y="606.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (262 samples, 0.10%)</title><rect x="87.2" y="595.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="90.2" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.writeFields_0_1$ (2,021 samples, 0.75%)</title><rect x="88.6" y="659.0" width="8.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="91.6" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.getUTF8String (99 samples, 0.04%)</title><rect x="88.6" y="643.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.6" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.isNullAt (66 samples, 0.02%)</title><rect x="88.7" y="627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.7" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/bitset/BitSetMethods.isSet (62 samples, 0.02%)</title><rect x="88.7" y="611.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.7" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (1,922 samples, 0.71%)</title><rect x="89.0" y="643.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.0" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (1,920 samples, 0.71%)</title><rect x="89.0" y="627.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.0" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.grow (894 samples, 0.33%)</title><rect x="89.4" y="611.0" width="3.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.4" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/BufferHolder.grow (892 samples, 0.33%)</title><rect x="89.4" y="595.0" width="3.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="92.4" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/array/ByteArrayMethods.roundNumberOfBytesToNearestWord (856 samples, 0.32%)</title><rect x="89.6" y="579.0" width="3.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.6" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/array/ByteArrayMethods.roundNumberOfBytesToNearestWord (856 samples, 0.32%)</title><rect x="89.6" y="563.0" width="3.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.6" y="574.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (875 samples, 0.32%)</title><rect x="93.4" y="611.0" width="3.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="96.4" y="622.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (171 samples, 0.06%)</title><rect x="96.4" y="595.0" width="0.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="99.4" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeRowWriter.zeroOutNullBytes (717 samples, 0.26%)</title><rect x="97.4" y="659.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.4" y="670.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (293 samples, 0.11%)</title><rect x="99.0" y="643.0" width="1.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="102.0" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.reset (75 samples, 0.03%)</title><rect x="100.5" y="659.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="103.5" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$KeyWithIndexToValueStore.org$apache$spark$sql$execution$streaming$state$SymmetricHashJoinStateManager$KeyWithIndexToValueStore$$keyWithIndexRow (1,731 samples, 0.64%)</title><rect x="101.2" y="691.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="104.2" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (119 samples, 0.04%)</title><rect x="104.4" y="675.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="107.4" y="686.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (798 samples, 0.29%)</title><rect x="105.1" y="675.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="108.1" y="686.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (798 samples, 0.29%)</title><rect x="105.1" y="659.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="108.1" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (798 samples, 0.29%)</title><rect x="105.1" y="643.0" width="3.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="108.1" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (798 samples, 0.29%)</title><rect x="105.1" y="627.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="108.1" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/util/NextIterator.closeIfNeeded (73 samples, 0.03%)</title><rect x="108.7" y="723.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="111.7" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/util/NextIterator.next (193 samples, 0.07%)</title><rect x="109.0" y="739.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="112.0" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/util/NextIterator.hasNext (63 samples, 0.02%)</title><rect x="109.6" y="723.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="112.6" y="734.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$Lambda$2487/1847982664.apply (327 samples, 0.12%)</title><rect x="109.9" y="739.0" width="1.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="112.9" y="750.0"></text>
</g>
<g>
<title>scala/collection/Iterator.$anonfun$filterNot$1$adapted (191 samples, 0.07%)</title><rect x="110.5" y="723.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="113.5" y="734.0"></text>
</g>
<g>
<title>scala/collection/Iterator.$anonfun$filterNot$1 (174 samples, 0.06%)</title><rect x="110.5" y="707.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="113.5" y="718.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.unboxToBoolean (121 samples, 0.04%)</title><rect x="110.7" y="691.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="113.7" y="702.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (7,416 samples, 2.74%)</title><rect x="111.4" y="771.0" width="32.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="114.4" y="782.0">sc..</text>
</g>
<g>
<title>itable stub (406 samples, 0.15%)</title><rect x="112.3" y="755.0" width="1.8" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="115.3" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager$$Lambda$2742/31848718.apply (6,560 samples, 2.42%)</title><rect x="114.1" y="755.0" width="28.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.1" y="766.0">or..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/SymmetricHashJoinStateManager.$anonfun$getJoinedRows$2 (6,413 samples, 2.37%)</title><rect x="114.7" y="739.0" width="28.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.7" y="750.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$$Lambda$2620/650403248.apply (6,150 samples, 2.27%)</title><rect x="114.9" y="723.0" width="26.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="117.9" y="734.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec.$anonfun$processPartitions$2$adapted (6,150 samples, 2.27%)</title><rect x="114.9" y="707.0" width="26.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.9" y="718.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec.$anonfun$processPartitions$2 (6,150 samples, 2.27%)</title><rect x="114.9" y="691.0" width="26.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="117.9" y="702.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificPredicate.eval (6,150 samples, 2.27%)</title><rect x="114.9" y="675.0" width="26.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="117.9" y="686.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificPredicate.And_0$ (6,150 samples, 2.27%)</title><rect x="114.9" y="659.0" width="26.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="117.9" y="670.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/util/DateTimeUtils.timestampAddDayTime (6,150 samples, 2.27%)</title><rect x="114.9" y="643.0" width="26.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.9" y="654.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/util/DateTimeUtils$.timestampAddDayTime (6,150 samples, 2.27%)</title><rect x="114.9" y="627.0" width="26.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="117.9" y="638.0">o..</text>
</g>
<g>
<title>java/time/Instant.atZone (2,380 samples, 0.88%)</title><rect x="114.9" y="611.0" width="10.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="117.9" y="622.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.ofInstant (2,380 samples, 0.88%)</title><rect x="114.9" y="595.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="117.9" y="606.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.create (2,380 samples, 0.88%)</title><rect x="114.9" y="579.0" width="10.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="117.9" y="590.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (735 samples, 0.27%)</title><rect x="114.9" y="563.0" width="3.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="117.9" y="574.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (270 samples, 0.10%)</title><rect x="115.3" y="547.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="118.3" y="558.0"></text>
</g>
<g>
<title>java/lang/Math.floorMod (303 samples, 0.11%)</title><rect x="116.4" y="547.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="119.4" y="558.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (277 samples, 0.10%)</title><rect x="116.5" y="531.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="119.5" y="542.0"></text>
</g>
<g>
<title>java/time/Instant.create (73 samples, 0.03%)</title><rect x="117.8" y="547.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="120.8" y="558.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.ofEpochSecond (1,558 samples, 0.58%)</title><rect x="118.1" y="563.0" width="6.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="121.1" y="574.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (338 samples, 0.12%)</title><rect x="118.9" y="547.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="121.9" y="558.0"></text>
</g>
<g>
<title>java/lang/Math.floorMod (302 samples, 0.11%)</title><rect x="120.4" y="547.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="123.4" y="558.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (287 samples, 0.11%)</title><rect x="120.4" y="531.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="123.4" y="542.0"></text>
</g>
<g>
<title>java/time/LocalDate.ofEpochDay (348 samples, 0.13%)</title><rect x="121.8" y="547.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="124.8" y="558.0"></text>
</g>
<g>
<title>java/time/LocalTime.ofNanoOfDay (288 samples, 0.11%)</title><rect x="123.3" y="547.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="126.3" y="558.0"></text>
</g>
<g>
<title>java/time/LocalTime.create (277 samples, 0.10%)</title><rect x="123.4" y="531.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="126.4" y="542.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.&lt;init&gt; (87 samples, 0.03%)</title><rect x="124.9" y="563.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="127.9" y="574.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.plus (1,960 samples, 0.72%)</title><rect x="125.3" y="611.0" width="8.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="128.3" y="622.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.plus (1,717 samples, 0.63%)</title><rect x="125.3" y="595.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="128.3" y="606.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.plusNanos (1,448 samples, 0.53%)</title><rect x="126.4" y="579.0" width="6.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="129.4" y="590.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.plusWithOverflow (1,448 samples, 0.53%)</title><rect x="126.4" y="563.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="129.4" y="574.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (345 samples, 0.13%)</title><rect x="127.4" y="547.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="130.4" y="558.0"></text>
</g>
<g>
<title>java/lang/Math.floorMod (335 samples, 0.12%)</title><rect x="128.9" y="547.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="131.9" y="558.0"></text>
</g>
<g>
<title>java/lang/Math.floorDiv (319 samples, 0.12%)</title><rect x="129.0" y="531.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.0" y="542.0"></text>
</g>
<g>
<title>java/time/LocalDateTime.with (88 samples, 0.03%)</title><rect x="130.5" y="547.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="133.5" y="558.0"></text>
</g>
<g>
<title>java/time/LocalTime.ofNanoOfDay (354 samples, 0.13%)</title><rect x="130.9" y="547.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="133.9" y="558.0"></text>
</g>
<g>
<title>java/time/LocalTime.create (332 samples, 0.12%)</title><rect x="131.0" y="531.0" width="1.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.0" y="542.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.resolveInstant (243 samples, 0.09%)</title><rect x="132.8" y="595.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="135.8" y="606.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.ofInstant (243 samples, 0.09%)</title><rect x="132.8" y="579.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="135.8" y="590.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.&lt;init&gt; (65 samples, 0.02%)</title><rect x="132.8" y="563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="135.8" y="574.0"></text>
</g>
<g>
<title>java/time/zone/ZoneRules.isValidOffset (178 samples, 0.07%)</title><rect x="133.1" y="563.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="136.1" y="574.0"></text>
</g>
<g>
<title>java/time/zone/ZoneRules.getValidOffsets (87 samples, 0.03%)</title><rect x="133.4" y="547.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="136.4" y="558.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.plusDays (575 samples, 0.21%)</title><rect x="133.9" y="611.0" width="2.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="136.9" y="622.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.resolveLocal (575 samples, 0.21%)</title><rect x="133.9" y="595.0" width="2.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="136.9" y="606.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.ofLocal (575 samples, 0.21%)</title><rect x="133.9" y="579.0" width="2.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="136.9" y="590.0"></text>
</g>
<g>
<title>java/time/ZonedDateTime.&lt;init&gt; (253 samples, 0.09%)</title><rect x="133.9" y="563.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="136.9" y="574.0"></text>
</g>
<g>
<title>java/time/zone/ZoneRules.getValidOffsets (322 samples, 0.12%)</title><rect x="135.0" y="563.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="138.0" y="574.0"></text>
</g>
<g>
<title>java/util/Collections.singletonList (156 samples, 0.06%)</title><rect x="135.7" y="547.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="138.7" y="558.0"></text>
</g>
<g>
<title>java/time/chrono/ChronoZonedDateTime.toInstant (377 samples, 0.14%)</title><rect x="136.4" y="611.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="139.4" y="622.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (377 samples, 0.14%)</title><rect x="136.4" y="595.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.4" y="606.0"></text>
</g>
<g>
<title>java/time/Instant.create (377 samples, 0.14%)</title><rect x="136.4" y="579.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="139.4" y="590.0"></text>
</g>
<g>
<title>java/time/Instant.&lt;init&gt; (377 samples, 0.14%)</title><rect x="136.4" y="563.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="139.4" y="574.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/util/DateTimeUtils$.microsToInstant (858 samples, 0.32%)</title><rect x="138.0" y="611.0" width="3.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="141.0" y="622.0"></text>
</g>
<g>
<title>java/time/Instant.ofEpochSecond (858 samples, 0.32%)</title><rect x="138.0" y="595.0" width="3.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="141.0" y="606.0"></text>
</g>
<g>
<title>java/time/Instant.create (858 samples, 0.32%)</title><rect x="138.0" y="579.0" width="3.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="141.0" y="590.0"></text>
</g>
<g>
<title>java/time/Instant.&lt;init&gt; (673 samples, 0.25%)</title><rect x="138.8" y="563.0" width="2.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.8" y="574.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$OneSideHashJoiner$$Lambda$2740/1003750422.apply (159 samples, 0.06%)</title><rect x="141.7" y="723.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.7" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingSymmetricHashJoinExec$OneSideHashJoiner.$anonfun$storeAndJoinWithOtherSide$10 (109 samples, 0.04%)</title><rect x="142.0" y="707.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="145.0" y="718.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$12.next (216 samples, 0.08%)</title><rect x="142.8" y="755.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="145.8" y="766.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$12.hasNext (96 samples, 0.04%)</title><rect x="143.8" y="867.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="146.8" y="878.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/ShuffleMapTask.runTask (27,745 samples, 10.25%)</title><rect x="144.4" y="1075.0" width="120.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="147.4" y="1086.0">org/apache/spar..</text>
</g>
<g>
<title>org/apache/spark/scheduler/ShuffleMapTask.runTask (27,745 samples, 10.25%)</title><rect x="144.4" y="1059.0" width="120.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="147.4" y="1070.0">org/apache/spar..</text>
</g>
<g>
<title>org/apache/spark/shuffle/ShuffleWriteProcessor.write (27,697 samples, 10.23%)</title><rect x="144.6" y="1043.0" width="120.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="147.6" y="1054.0">org/apache/spar..</text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.iterator (84 samples, 0.03%)</title><rect x="144.6" y="1027.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="147.6" y="1038.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.computeOrReadCheckpoint (84 samples, 0.03%)</title><rect x="144.6" y="1011.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="147.6" y="1022.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/MapPartitionsRDD.compute (84 samples, 0.03%)</title><rect x="144.6" y="995.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="147.6" y="1006.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.iterator (61 samples, 0.02%)</title><rect x="144.7" y="979.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="147.7" y="990.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.computeOrReadCheckpoint (61 samples, 0.02%)</title><rect x="144.7" y="963.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="147.7" y="974.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/MapPartitionsRDD.compute (61 samples, 0.02%)</title><rect x="144.7" y="947.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="147.7" y="958.0"></text>
</g>
<g>
<title>org/apache/spark/shuffle/celeborn/HashBasedShuffleWriter.write (27,480 samples, 10.15%)</title><rect x="144.9" y="1027.0" width="119.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="147.9" y="1038.0">org/apache/spar..</text>
</g>
<g>
<title>org/apache/spark/shuffle/celeborn/HashBasedShuffleWriter.write0 (27,437 samples, 10.13%)</title><rect x="145.1" y="1011.0" width="119.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="148.1" y="1022.0">org/apache/spar..</text>
</g>
<g>
<title>org/apache/spark/shuffle/celeborn/HashBasedShuffleWriter.getOrUpdateOffset (286 samples, 0.11%)</title><rect x="145.2" y="995.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="148.2" y="1006.0"></text>
</g>
<g>
<title>org/apache/spark/shuffle/celeborn/HashBasedShuffleWriter.flushSendBuffer (96 samples, 0.04%)</title><rect x="146.0" y="979.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="149.0" y="990.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/write/DataPusher.addTask (96 samples, 0.04%)</title><rect x="146.0" y="963.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="149.0" y="974.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/write/DataPushQueue.addPushTask (82 samples, 0.03%)</title><rect x="146.0" y="947.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="149.0" y="958.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (82 samples, 0.03%)</title><rect x="146.0" y="931.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="149.0" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (75 samples, 0.03%)</title><rect x="146.0" y="915.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="149.0" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (74 samples, 0.03%)</title><rect x="146.0" y="899.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="149.0" y="910.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (68 samples, 0.03%)</title><rect x="146.1" y="883.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="149.1" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/UnsafeRowSerializerInstance$$anon$1.flush (125 samples, 0.05%)</title><rect x="146.4" y="995.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="149.4" y="1006.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.flush (111 samples, 0.04%)</title><rect x="146.5" y="979.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="149.5" y="990.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (111 samples, 0.04%)</title><rect x="146.5" y="963.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.5" y="974.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (111 samples, 0.04%)</title><rect x="146.5" y="947.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.5" y="958.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (111 samples, 0.04%)</title><rect x="146.5" y="931.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="149.5" y="942.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.ensureCapacity (111 samples, 0.04%)</title><rect x="146.5" y="915.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="149.5" y="926.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.grow (111 samples, 0.04%)</title><rect x="146.5" y="899.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="149.5" y="910.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/UnsafeRowSerializerInstance$$anon$1.writeValue (497 samples, 0.18%)</title><rect x="147.0" y="995.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="150.0" y="1006.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.writeInt (295 samples, 0.11%)</title><rect x="147.3" y="979.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="150.3" y="990.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (131 samples, 0.05%)</title><rect x="147.4" y="963.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="150.4" y="974.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (114 samples, 0.04%)</title><rect x="148.0" y="963.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="151.0" y="974.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.ensureCapacity (114 samples, 0.04%)</title><rect x="148.0" y="947.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.0" y="958.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.grow (114 samples, 0.04%)</title><rect x="148.0" y="931.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="151.0" y="942.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.writeToStream (109 samples, 0.04%)</title><rect x="148.6" y="979.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="151.6" y="990.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.write (109 samples, 0.04%)</title><rect x="148.6" y="963.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="151.6" y="974.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (62 samples, 0.02%)</title><rect x="148.8" y="947.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="151.8" y="958.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (62 samples, 0.02%)</title><rect x="148.8" y="931.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="151.8" y="942.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (25,786 samples, 9.52%)</title><rect x="149.1" y="995.0" width="112.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.1" y="1006.0">scala/collecti..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/WholeStageCodegenExec$$anon$1.hasNext (1,972 samples, 0.73%)</title><rect x="149.3" y="979.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="152.3" y="990.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/BufferedRowIterator.hasNext (1,970 samples, 0.73%)</title><rect x="149.3" y="963.0" width="8.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="152.3" y="974.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$GeneratedIteratorForCodegenStage2.processNext (956 samples, 0.35%)</title><rect x="149.3" y="947.0" width="4.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="152.3" y="958.0"></text>
</g>
<g>
<title>org/apache/spark/util/CompletionIterator.hasNext (955 samples, 0.35%)</title><rect x="149.3" y="931.0" width="4.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="152.3" y="942.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$12.hasNext (925 samples, 0.34%)</title><rect x="149.4" y="915.0" width="4.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.4" y="926.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingDeduplicateExec$$Lambda$2488/1367684222.apply (246 samples, 0.09%)</title><rect x="149.6" y="899.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="152.6" y="910.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingDeduplicateExec.$anonfun$doExecute$21$adapted (243 samples, 0.09%)</title><rect x="149.6" y="883.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.6" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingDeduplicateExec.$anonfun$doExecute$21 (243 samples, 0.09%)</title><rect x="149.6" y="867.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="152.6" y="878.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (72 samples, 0.03%)</title><rect x="149.6" y="851.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="152.6" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (72 samples, 0.03%)</title><rect x="149.6" y="835.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.6" y="846.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (72 samples, 0.03%)</title><rect x="149.6" y="819.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.6" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (72 samples, 0.03%)</title><rect x="149.6" y="803.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="152.6" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider$HDFSBackedStateStore.get (160 samples, 0.06%)</title><rect x="149.9" y="851.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="152.9" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/NoPrefixHDFSBackedStateStoreMap.get (160 samples, 0.06%)</title><rect x="149.9" y="835.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.9" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (160 samples, 0.06%)</title><rect x="149.9" y="819.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.9" y="830.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$12.hasNext (594 samples, 0.22%)</title><rect x="150.7" y="899.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="153.7" y="910.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (62 samples, 0.02%)</title><rect x="151.0" y="883.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="154.0" y="894.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (457 samples, 0.17%)</title><rect x="151.3" y="883.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="154.3" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/InterruptibleIterator.next (415 samples, 0.15%)</title><rect x="151.4" y="867.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="154.4" y="878.0"></text>
</g>
<g>
<title>org/apache/spark/util/CompletionIterator.next (409 samples, 0.15%)</title><rect x="151.4" y="851.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="154.4" y="862.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (375 samples, 0.14%)</title><rect x="151.6" y="835.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="154.6" y="846.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$11.next (350 samples, 0.13%)</title><rect x="151.7" y="819.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="154.7" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/UnsafeRowSerializerInstance$$anon$2$$anon$3.next (332 samples, 0.12%)</title><rect x="151.7" y="803.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.7" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/UnsafeRowSerializerInstance$$anon$2$$anon$3.next (332 samples, 0.12%)</title><rect x="151.7" y="787.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="154.7" y="798.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/UnsafeRowSerializerInstance$$anon$2$$anon$3.readSize (96 samples, 0.04%)</title><rect x="151.7" y="771.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="154.7" y="782.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readInt (96 samples, 0.04%)</title><rect x="151.7" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="154.7" y="766.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (64 samples, 0.02%)</title><rect x="151.8" y="739.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.8" y="750.0"></text>
</g>
<g>
<title>org/sparkproject/guava/io/ByteStreams.readFully (236 samples, 0.09%)</title><rect x="152.1" y="771.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="155.1" y="782.0"></text>
</g>
<g>
<title>org/sparkproject/guava/io/ByteStreams.read (236 samples, 0.09%)</title><rect x="152.1" y="755.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="155.1" y="766.0"></text>
</g>
<g>
<title>java/io/DataInputStream.read (231 samples, 0.09%)</title><rect x="152.1" y="739.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="155.1" y="750.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (215 samples, 0.08%)</title><rect x="152.2" y="723.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="155.2" y="734.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read1 (215 samples, 0.08%)</title><rect x="152.2" y="707.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="155.2" y="718.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (160 samples, 0.06%)</title><rect x="152.3" y="691.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="155.3" y="702.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/read/RssInputStream$RssInputStreamImpl.read (157 samples, 0.06%)</title><rect x="152.3" y="675.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.3" y="686.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/read/RssInputStream$RssInputStreamImpl.fillBuffer (143 samples, 0.05%)</title><rect x="152.4" y="659.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="155.4" y="670.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/compress/RssLz4Decompressor.decompress (130 samples, 0.05%)</title><rect x="152.4" y="643.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.4" y="654.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JNIFastDecompressor.decompress (91 samples, 0.03%)</title><rect x="152.4" y="627.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="155.4" y="638.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JNI.LZ4_decompress_fast (90 samples, 0.03%)</title><rect x="152.4" y="611.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="155.4" y="622.0"></text>
</g>
<g>
<title>[unknown] (90 samples, 0.03%)</title><rect x="152.4" y="595.0" width="0.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="155.4" y="606.0"></text>
</g>
<g>
<title>LZ4_decompress_fast (83 samples, 0.03%)</title><rect x="152.4" y="579.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="155.4" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$GeneratedIteratorForCodegenStage4.processNext (1,014 samples, 0.37%)</title><rect x="153.4" y="947.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="156.4" y="958.0"></text>
</g>
<g>
<title>org/apache/spark/util/CompletionIterator.hasNext (1,013 samples, 0.37%)</title><rect x="153.5" y="931.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="156.5" y="942.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$12.hasNext (981 samples, 0.36%)</title><rect x="153.6" y="915.0" width="4.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="156.6" y="926.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingDeduplicateExec$$Lambda$2488/1367684222.apply (271 samples, 0.10%)</title><rect x="153.8" y="899.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="156.8" y="910.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingDeduplicateExec.$anonfun$doExecute$21$adapted (263 samples, 0.10%)</title><rect x="153.8" y="883.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="156.8" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/StreamingDeduplicateExec.$anonfun$doExecute$21 (263 samples, 0.10%)</title><rect x="153.8" y="867.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="156.8" y="878.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (87 samples, 0.03%)</title><rect x="153.8" y="851.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="156.8" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (87 samples, 0.03%)</title><rect x="153.8" y="835.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="156.8" y="846.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (87 samples, 0.03%)</title><rect x="153.8" y="819.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="156.8" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (87 samples, 0.03%)</title><rect x="153.8" y="803.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="156.8" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/HDFSBackedStateStoreProvider$HDFSBackedStateStore.get (164 samples, 0.06%)</title><rect x="154.2" y="851.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="157.2" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/state/NoPrefixHDFSBackedStateStoreMap.get (164 samples, 0.06%)</title><rect x="154.2" y="835.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="157.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (164 samples, 0.06%)</title><rect x="154.2" y="819.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="157.2" y="830.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$12.hasNext (621 samples, 0.23%)</title><rect x="155.0" y="899.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="158.0" y="910.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (63 samples, 0.02%)</title><rect x="155.3" y="883.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="158.3" y="894.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (478 samples, 0.18%)</title><rect x="155.6" y="883.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="158.6" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/InterruptibleIterator.next (426 samples, 0.16%)</title><rect x="155.8" y="867.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="158.8" y="878.0"></text>
</g>
<g>
<title>org/apache/spark/util/CompletionIterator.next (420 samples, 0.16%)</title><rect x="155.8" y="851.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.8" y="862.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (390 samples, 0.14%)</title><rect x="155.9" y="835.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="158.9" y="846.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$11.next (362 samples, 0.13%)</title><rect x="156.1" y="819.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="159.1" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/UnsafeRowSerializerInstance$$anon$2$$anon$3.next (345 samples, 0.13%)</title><rect x="156.1" y="803.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="159.1" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/UnsafeRowSerializerInstance$$anon$2$$anon$3.next (345 samples, 0.13%)</title><rect x="156.1" y="787.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.1" y="798.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/UnsafeRowSerializerInstance$$anon$2$$anon$3.readSize (90 samples, 0.03%)</title><rect x="156.1" y="771.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="159.1" y="782.0"></text>
</g>
<g>
<title>java/io/DataInputStream.readInt (90 samples, 0.03%)</title><rect x="156.1" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="159.1" y="766.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (64 samples, 0.02%)</title><rect x="156.2" y="739.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="159.2" y="750.0"></text>
</g>
<g>
<title>org/sparkproject/guava/io/ByteStreams.readFully (255 samples, 0.09%)</title><rect x="156.5" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="159.5" y="782.0"></text>
</g>
<g>
<title>org/sparkproject/guava/io/ByteStreams.read (255 samples, 0.09%)</title><rect x="156.5" y="755.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.5" y="766.0"></text>
</g>
<g>
<title>java/io/DataInputStream.read (253 samples, 0.09%)</title><rect x="156.5" y="739.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="159.5" y="750.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read (221 samples, 0.08%)</title><rect x="156.6" y="723.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="159.6" y="734.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.read1 (220 samples, 0.08%)</title><rect x="156.6" y="707.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.6" y="718.0"></text>
</g>
<g>
<title>java/io/BufferedInputStream.fill (165 samples, 0.06%)</title><rect x="156.7" y="691.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="159.7" y="702.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/read/RssInputStream$RssInputStreamImpl.read (165 samples, 0.06%)</title><rect x="156.7" y="675.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.7" y="686.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/read/RssInputStream$RssInputStreamImpl.fillBuffer (152 samples, 0.06%)</title><rect x="156.8" y="659.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="159.8" y="670.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/compress/RssLz4Decompressor.decompress (133 samples, 0.05%)</title><rect x="156.8" y="643.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="159.8" y="654.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JNIFastDecompressor.decompress (85 samples, 0.03%)</title><rect x="156.8" y="627.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="159.8" y="638.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JNI.LZ4_decompress_fast (85 samples, 0.03%)</title><rect x="156.8" y="611.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="159.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (85 samples, 0.03%)</title><rect x="156.8" y="595.0" width="0.4" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="159.8" y="606.0"></text>
</g>
<g>
<title>LZ4_decompress_fast (76 samples, 0.03%)</title><rect x="156.8" y="579.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="159.8" y="590.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (23,781 samples, 8.78%)</title><rect x="157.9" y="979.0" width="103.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="160.9" y="990.0">scala/collec..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/WholeStageCodegenExec$$anon$1.hasNext (23,742 samples, 8.77%)</title><rect x="158.0" y="963.0" width="103.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.0" y="974.0">org/apache/s..</text>
</g>
<g>
<title>org/apache/spark/sql/execution/BufferedRowIterator.hasNext (23,667 samples, 8.74%)</title><rect x="158.3" y="947.0" width="103.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="161.3" y="958.0">org/apache/s..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$GeneratedIteratorForCodegenStage1.processNext (15,559 samples, 5.75%)</title><rect x="158.4" y="931.0" width="67.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="161.4" y="942.0">org/apa..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (192 samples, 0.07%)</title><rect x="158.4" y="915.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="161.4" y="926.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (192 samples, 0.07%)</title><rect x="158.4" y="899.0" width="0.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="161.4" y="910.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (192 samples, 0.07%)</title><rect x="158.4" y="883.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="161.4" y="894.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (4,419 samples, 1.63%)</title><rect x="159.3" y="915.0" width="19.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.3" y="926.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (4,410 samples, 1.63%)</title><rect x="159.4" y="899.0" width="19.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="162.4" y="910.0"></text>
</g>
<g>
<title>org/apache/spark/InterruptibleIterator.hasNext (4,372 samples, 1.61%)</title><rect x="159.5" y="883.0" width="19.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="162.5" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataSourceRDD$$anon$1.hasNext (4,329 samples, 1.60%)</title><rect x="159.7" y="867.0" width="18.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="162.7" y="878.0"></text>
</g>
<g>
<title>scala/Option.exists (4,302 samples, 1.59%)</title><rect x="159.8" y="851.0" width="18.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="162.8" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataSourceRDD$$anon$1$$Lambda$1394/1074031834.apply (4,300 samples, 1.59%)</title><rect x="159.8" y="835.0" width="18.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="162.8" y="846.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataSourceRDD$$anon$1.$anonfun$hasNext$1$adapted (4,297 samples, 1.59%)</title><rect x="159.8" y="819.0" width="18.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="162.8" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataSourceRDD$$anon$1.$anonfun$hasNext$1 (4,296 samples, 1.59%)</title><rect x="159.8" y="803.0" width="18.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="162.8" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/MetricsIterator.hasNext (4,296 samples, 1.59%)</title><rect x="159.8" y="787.0" width="18.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="162.8" y="798.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/PartitionIterator.hasNext (4,281 samples, 1.58%)</title><rect x="159.9" y="771.0" width="18.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.9" y="782.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/KafkaBatchPartitionReader.next (4,279 samples, 1.58%)</title><rect x="159.9" y="755.0" width="18.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="162.9" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/KafkaRecordToRowConverter$$Lambda$1433/1214308233.apply (969 samples, 0.36%)</title><rect x="160.2" y="739.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="163.2" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/KafkaRecordToRowConverter.$anonfun$toUnsafeRowWithoutHeadersProjector$1 (969 samples, 0.36%)</title><rect x="160.2" y="723.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="163.2" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (380 samples, 0.14%)</title><rect x="160.2" y="707.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.2" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.writeFields_0_0$ (290 samples, 0.11%)</title><rect x="160.5" y="691.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.5" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (290 samples, 0.11%)</title><rect x="160.5" y="675.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="163.5" y="686.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (163 samples, 0.06%)</title><rect x="160.5" y="659.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="163.5" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (163 samples, 0.06%)</title><rect x="160.5" y="643.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="163.5" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (114 samples, 0.04%)</title><rect x="160.7" y="627.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="163.7" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (127 samples, 0.05%)</title><rect x="161.2" y="659.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="164.2" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (127 samples, 0.05%)</title><rect x="161.2" y="643.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="164.2" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/KafkaRecordToRowConverter$$Lambda$1425/825442207.apply (589 samples, 0.22%)</title><rect x="161.8" y="707.0" width="2.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="164.8" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/KafkaRecordToRowConverter.$anonfun$toInternalRowWithoutHeaders$1 (589 samples, 0.22%)</title><rect x="161.8" y="691.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="164.8" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/types/UTF8String.fromString (216 samples, 0.08%)</title><rect x="162.0" y="675.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="165.0" y="686.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (216 samples, 0.08%)</title><rect x="162.0" y="659.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="165.0" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (193 samples, 0.07%)</title><rect x="162.1" y="643.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="165.1" y="654.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (80 samples, 0.03%)</title><rect x="162.6" y="627.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="165.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (63 samples, 0.02%)</title><rect x="162.7" y="611.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (63 samples, 0.02%)</title><rect x="162.7" y="595.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.7" y="606.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (63 samples, 0.02%)</title><rect x="162.7" y="579.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="165.7" y="590.0"></text>
</g>
<g>
<title>scala/LowPriorityImplicits.genericWrapArray (327 samples, 0.12%)</title><rect x="163.0" y="675.0" width="1.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="166.0" y="686.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray$.make (327 samples, 0.12%)</title><rect x="163.0" y="659.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="166.0" y="670.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray$ofRef.&lt;init&gt; (327 samples, 0.12%)</title><rect x="163.0" y="643.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="166.0" y="654.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray.&lt;init&gt; (327 samples, 0.12%)</title><rect x="163.0" y="627.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="166.0" y="638.0"></text>
</g>
<g>
<title>scala/collection/mutable/AbstractSeq.&lt;init&gt; (327 samples, 0.12%)</title><rect x="163.0" y="611.0" width="1.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.0" y="622.0"></text>
</g>
<g>
<title>scala/collection/AbstractSeq.&lt;init&gt; (327 samples, 0.12%)</title><rect x="163.0" y="595.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="166.0" y="606.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterable.&lt;init&gt; (327 samples, 0.12%)</title><rect x="163.0" y="579.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="166.0" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer.get (3,240 samples, 1.20%)</title><rect x="164.4" y="739.0" width="14.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.4" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer.runUninterruptiblyIfPossible (3,240 samples, 1.20%)</title><rect x="164.4" y="723.0" width="14.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="167.4" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/util/UninterruptibleThread.runUninterruptibly (3,240 samples, 1.20%)</title><rect x="164.4" y="707.0" width="14.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="167.4" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer$$Lambda$1448/1225358481.apply (2,926 samples, 1.08%)</title><rect x="165.8" y="691.0" width="12.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="168.8" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer.$anonfun$get$1 (2,921 samples, 1.08%)</title><rect x="165.8" y="675.0" width="12.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="168.8" y="686.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer.fetchRecord (2,837 samples, 1.05%)</title><rect x="166.0" y="659.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="169.0" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/FetchedData.next (142 samples, 0.05%)</title><rect x="166.1" y="643.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.1" y="654.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList$1.next (138 samples, 0.05%)</title><rect x="166.1" y="627.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.1" y="638.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (138 samples, 0.05%)</title><rect x="166.1" y="611.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="169.1" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer.fetchData (2,645 samples, 0.98%)</title><rect x="166.8" y="643.0" width="11.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="169.8" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/InternalKafkaConsumer.fetch (2,639 samples, 0.97%)</title><rect x="166.8" y="627.0" width="11.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.8" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (1,270 samples, 0.47%)</title><rect x="166.8" y="611.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="169.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (1,270 samples, 0.47%)</title><rect x="166.8" y="595.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="169.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (1,194 samples, 0.44%)</title><rect x="166.8" y="579.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="169.8" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (1,194 samples, 0.44%)</title><rect x="166.8" y="563.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="169.8" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (1,187 samples, 0.44%)</title><rect x="166.9" y="547.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="169.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (1,148 samples, 0.42%)</title><rect x="166.9" y="531.0" width="5.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="169.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (1,148 samples, 0.42%)</title><rect x="166.9" y="515.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="169.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (880 samples, 0.33%)</title><rect x="166.9" y="499.0" width="3.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="169.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (482 samples, 0.18%)</title><rect x="167.1" y="483.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="170.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (482 samples, 0.18%)</title><rect x="167.1" y="467.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="170.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (482 samples, 0.18%)</title><rect x="167.1" y="451.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (482 samples, 0.18%)</title><rect x="167.1" y="435.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="170.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (482 samples, 0.18%)</title><rect x="167.1" y="419.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="170.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (482 samples, 0.18%)</title><rect x="167.1" y="403.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="170.1" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (472 samples, 0.17%)</title><rect x="167.1" y="387.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.1" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (133 samples, 0.05%)</title><rect x="169.2" y="483.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.2" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (130 samples, 0.05%)</title><rect x="169.2" y="467.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="172.2" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (130 samples, 0.05%)</title><rect x="169.2" y="451.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="172.2" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (130 samples, 0.05%)</title><rect x="169.2" y="435.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="172.2" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (102 samples, 0.04%)</title><rect x="169.2" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="172.2" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (102 samples, 0.04%)</title><rect x="169.2" y="403.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="172.2" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.streamingIterator (60 samples, 0.02%)</title><rect x="170.1" y="483.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="173.1" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isCompressed (59 samples, 0.02%)</title><rect x="170.1" y="467.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="173.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/AbstractRecordBatch.isCompressed (59 samples, 0.02%)</title><rect x="170.1" y="451.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.hasNext (84 samples, 0.03%)</title><rect x="170.3" y="483.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="173.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/AbstractIterator.maybeComputeNext (75 samples, 0.03%)</title><rect x="170.4" y="467.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="173.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (71 samples, 0.03%)</title><rect x="170.4" y="451.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="173.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/RecordBatchIterator.makeNext (67 samples, 0.02%)</title><rect x="170.4" y="435.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="173.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/ByteBufferLogInputStream.nextBatch (60 samples, 0.02%)</title><rect x="170.5" y="419.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="173.5" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (248 samples, 0.09%)</title><rect x="170.8" y="499.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.8" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (234 samples, 0.09%)</title><rect x="170.8" y="483.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="173.8" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (233 samples, 0.09%)</title><rect x="170.8" y="467.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="173.8" y="478.0"></text>
</g>
<g>
<title>java/util/Optional.of (233 samples, 0.09%)</title><rect x="170.8" y="451.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="173.8" y="462.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/InternalKafkaConsumer.getAvailableOffsetRange (1,250 samples, 0.46%)</title><rect x="172.4" y="611.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.position (1,159 samples, 0.43%)</title><rect x="172.4" y="595.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.position (1,158 samples, 0.43%)</title><rect x="172.4" y="579.0" width="5.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.4" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (168 samples, 0.06%)</title><rect x="172.4" y="563.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="175.4" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.resetOffsetsIfNeeded (122 samples, 0.05%)</title><rect x="172.5" y="547.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="175.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.resetOffsetsAsync (112 samples, 0.04%)</title><rect x="172.5" y="531.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="175.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (970 samples, 0.36%)</title><rect x="173.2" y="563.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="176.2" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (970 samples, 0.36%)</title><rect x="173.2" y="547.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="176.2" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (966 samples, 0.36%)</title><rect x="173.2" y="531.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="176.2" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (597 samples, 0.22%)</title><rect x="173.2" y="515.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="176.2" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (495 samples, 0.18%)</title><rect x="173.7" y="499.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="176.7" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (345 samples, 0.13%)</title><rect x="174.0" y="483.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.0" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (238 samples, 0.09%)</title><rect x="174.1" y="467.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="177.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (194 samples, 0.07%)</title><rect x="174.1" y="451.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (191 samples, 0.07%)</title><rect x="174.1" y="435.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="177.1" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (191 samples, 0.07%)</title><rect x="174.1" y="419.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="177.1" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/memory/MemoryPool$1.tryAllocate (77 samples, 0.03%)</title><rect x="174.1" y="403.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="177.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (77 samples, 0.03%)</title><rect x="174.1" y="387.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="177.1" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (75 samples, 0.03%)</title><rect x="174.1" y="371.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="177.1" y="382.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (75 samples, 0.03%)</title><rect x="174.1" y="355.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="177.1" y="366.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc.so.6 (75 samples, 0.03%)</title><rect x="174.1" y="339.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="177.1" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (114 samples, 0.04%)</title><rect x="174.5" y="403.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="177.5" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (110 samples, 0.04%)</title><rect x="174.5" y="387.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.5" y="398.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (84 samples, 0.03%)</title><rect x="174.5" y="371.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="177.5" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptWrite (72 samples, 0.03%)</title><rect x="175.1" y="467.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="178.1" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.write (72 samples, 0.03%)</title><rect x="175.1" y="451.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="178.1" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.select (76 samples, 0.03%)</title><rect x="175.5" y="483.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="178.5" y="494.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (74 samples, 0.03%)</title><rect x="175.5" y="467.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="178.5" y="478.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (67 samples, 0.02%)</title><rect x="175.5" y="451.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="178.5" y="462.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (64 samples, 0.02%)</title><rect x="175.5" y="435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="178.5" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (259 samples, 0.10%)</title><rect x="175.9" y="515.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="178.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (253 samples, 0.09%)</title><rect x="175.9" y="499.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="178.9" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (253 samples, 0.09%)</title><rect x="175.9" y="483.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="178.9" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (252 samples, 0.09%)</title><rect x="176.0" y="467.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.0" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (239 samples, 0.09%)</title><rect x="176.0" y="451.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="179.0" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$5.onSuccess (239 samples, 0.09%)</title><rect x="176.0" y="435.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.0" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$5.onSuccess (239 samples, 0.09%)</title><rect x="176.0" y="419.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.0" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$2800 (239 samples, 0.09%)</title><rect x="176.0" y="403.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.0" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.handleListOffsetResponse (239 samples, 0.09%)</title><rect x="176.0" y="387.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.0" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (227 samples, 0.08%)</title><rect x="176.0" y="371.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="179.0" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (227 samples, 0.08%)</title><rect x="176.0" y="355.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.0" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$2.onSuccess (226 samples, 0.08%)</title><rect x="176.1" y="339.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.1" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$2.onSuccess (226 samples, 0.08%)</title><rect x="176.1" y="323.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.1" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.resetOffsetIfNeeded (223 samples, 0.08%)</title><rect x="176.1" y="307.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.1" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeSeekUnvalidated (212 samples, 0.08%)</title><rect x="176.1" y="291.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.1" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.info (204 samples, 0.08%)</title><rect x="176.1" y="275.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="179.1" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.writeLog (204 samples, 0.08%)</title><rect x="176.1" y="259.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="179.1" y="270.0"></text>
</g>
<g>
<title>org/apache/logging/slf4j/Log4jLogger.log (101 samples, 0.04%)</title><rect x="176.2" y="243.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.2" y="254.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/Logger.logMessage (101 samples, 0.04%)</title><rect x="176.2" y="227.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="179.2" y="238.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/config/AwaitCompletionReliabilityStrategy.log (101 samples, 0.04%)</title><rect x="176.2" y="211.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.2" y="222.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/config/LoggerConfig.log (101 samples, 0.04%)</title><rect x="176.2" y="195.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.2" y="206.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/config/LoggerConfig.log (87 samples, 0.03%)</title><rect x="176.2" y="179.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.2" y="190.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/config/LoggerConfig.processLogEvent (87 samples, 0.03%)</title><rect x="176.2" y="163.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="179.2" y="174.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/config/LoggerConfig.callAppenders (87 samples, 0.03%)</title><rect x="176.2" y="147.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="179.2" y="158.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/config/AppenderControl.callAppender (85 samples, 0.03%)</title><rect x="176.2" y="131.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="179.2" y="142.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/config/AppenderControl.callAppenderPreventRecursion (84 samples, 0.03%)</title><rect x="176.2" y="115.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.2" y="126.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/config/AppenderControl.callAppender0 (82 samples, 0.03%)</title><rect x="176.2" y="99.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="179.2" y="110.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/config/AppenderControl.tryCallAppender (82 samples, 0.03%)</title><rect x="176.2" y="83.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.2" y="94.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.append (82 samples, 0.03%)</title><rect x="176.2" y="67.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="179.2" y="78.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.tryAppend (82 samples, 0.03%)</title><rect x="176.2" y="51.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="179.2" y="62.0"></text>
</g>
<g>
<title>org/apache/logging/log4j/core/appender/AbstractOutputStreamAppender.directEncodeEvent (82 samples, 0.03%)</title><rect x="176.2" y="35.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.2" y="46.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (100 samples, 0.04%)</title><rect x="176.6" y="243.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="179.6" y="254.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.arrayFormat (100 samples, 0.04%)</title><rect x="176.6" y="227.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="179.6" y="238.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.deeplyAppendParameter (92 samples, 0.03%)</title><rect x="176.6" y="211.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.6" y="222.0"></text>
</g>
<g>
<title>org/slf4j/helpers/MessageFormatter.safeObjectAppend (88 samples, 0.03%)</title><rect x="176.7" y="195.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.7" y="206.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState$FetchPosition.toString (82 samples, 0.03%)</title><rect x="176.7" y="179.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.7" y="190.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (82 samples, 0.03%)</title><rect x="176.7" y="163.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="179.7" y="174.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (71 samples, 0.03%)</title><rect x="176.7" y="147.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="179.7" y="158.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/Metadata$LeaderAndEpoch.toString (68 samples, 0.03%)</title><rect x="176.7" y="131.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="179.7" y="142.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (67 samples, 0.02%)</title><rect x="176.7" y="115.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.7" y="126.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (67 samples, 0.02%)</title><rect x="176.7" y="99.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.7" y="110.0"></text>
</g>
<g>
<title>java/util/Optional.toString (63 samples, 0.02%)</title><rect x="176.7" y="83.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="179.7" y="94.0"></text>
</g>
<g>
<title>java/lang/String.format (63 samples, 0.02%)</title><rect x="176.7" y="67.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.7" y="78.0"></text>
</g>
<g>
<title>java/util/Formatter.format (61 samples, 0.02%)</title><rect x="176.8" y="51.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="179.8" y="62.0"></text>
</g>
<g>
<title>java/util/Formatter.format (60 samples, 0.02%)</title><rect x="176.8" y="35.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="179.8" y="46.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.trySend (70 samples, 0.03%)</title><rect x="177.1" y="515.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="180.1" y="526.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/InternalKafkaConsumer.seek (108 samples, 0.04%)</title><rect x="177.8" y="611.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="180.8" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.seek (87 samples, 0.03%)</title><rect x="177.8" y="595.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="180.8" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.info (64 samples, 0.02%)</title><rect x="177.9" y="579.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="180.9" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.writeLog (63 samples, 0.02%)</title><rect x="178.0" y="563.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="181.0" y="574.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (10,921 samples, 4.03%)</title><rect x="178.6" y="915.0" width="47.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.6" y="926.0">scal..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (10,600 samples, 3.92%)</title><rect x="178.6" y="899.0" width="46.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="181.6" y="910.0">org/..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (10,598 samples, 3.91%)</title><rect x="178.6" y="883.0" width="46.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="181.6" y="894.0">org/..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.writeFields_0_0$ (108 samples, 0.04%)</title><rect x="178.9" y="867.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="181.9" y="878.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnaryExpression.eval (10,335 samples, 3.82%)</title><rect x="179.5" y="867.0" width="45.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="182.5" y="878.0">org/..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs.nullSafeEval (10,104 samples, 3.73%)</title><rect x="179.7" y="851.0" width="44.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="182.7" y="862.0">org/..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs$$Lambda$2026/764062617.apply (88 samples, 0.03%)</title><rect x="179.7" y="835.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="182.7" y="846.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs.$anonfun$converter$1 (88 samples, 0.03%)</title><rect x="179.7" y="819.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.7" y="830.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (60 samples, 0.02%)</title><rect x="179.8" y="803.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="182.8" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/util/FailureSafeParser.parse (9,992 samples, 3.69%)</title><rect x="180.2" y="835.0" width="43.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.2" y="846.0">org/..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs$$Lambda$2318/1776878183.apply (9,992 samples, 3.69%)</title><rect x="180.2" y="819.0" width="43.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="183.2" y="830.0">org/..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs.$anonfun$parser$3 (9,992 samples, 3.69%)</title><rect x="180.2" y="803.0" width="43.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="183.2" y="814.0">org/..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.parse (9,992 samples, 3.69%)</title><rect x="180.2" y="787.0" width="43.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.2" y="798.0">org/..</text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithResource (9,992 samples, 3.69%)</title><rect x="180.2" y="771.0" width="43.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="183.2" y="782.0">org/..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (133 samples, 0.05%)</title><rect x="180.2" y="755.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="183.2" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser._closeInput (115 samples, 0.04%)</title><rect x="180.3" y="739.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.3" y="750.0"></text>
</g>
<g>
<title>java/io/InputStreamReader.close (115 samples, 0.04%)</title><rect x="180.3" y="723.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="183.3" y="734.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.close (115 samples, 0.04%)</title><rect x="180.3" y="707.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="183.3" y="718.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.implClose (87 samples, 0.03%)</title><rect x="180.4" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="183.4" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2329/545051148.apply (3,571 samples, 1.32%)</title><rect x="180.8" y="755.0" width="15.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="183.8" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$parse$1 (3,571 samples, 1.32%)</title><rect x="180.8" y="739.0" width="15.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="183.8" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs$$Lambda$2316/954903303.apply (3,571 samples, 1.32%)</title><rect x="180.8" y="723.0" width="15.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="183.8" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs.$anonfun$parser$2 (3,571 samples, 1.32%)</title><rect x="180.8" y="707.0" width="15.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="183.8" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/CreateJacksonParser$.utf8String (3,529 samples, 1.30%)</title><rect x="181.0" y="691.0" width="15.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="184.0" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (1,008 samples, 0.37%)</title><rect x="192.0" y="675.0" width="4.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="195.0" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (115 samples, 0.04%)</title><rect x="193.3" y="659.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="196.3" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (115 samples, 0.04%)</title><rect x="193.3" y="643.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="196.3" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (115 samples, 0.04%)</title><rect x="193.3" y="627.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.3" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (115 samples, 0.04%)</title><rect x="193.3" y="611.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="196.3" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (115 samples, 0.04%)</title><rect x="193.3" y="595.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.3" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (115 samples, 0.04%)</title><rect x="193.3" y="579.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="196.3" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (115 samples, 0.04%)</title><rect x="193.3" y="563.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="196.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (111 samples, 0.04%)</title><rect x="193.3" y="547.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="196.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (589 samples, 0.22%)</title><rect x="193.8" y="659.0" width="2.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="196.8" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2332/613359898.apply (6,247 samples, 2.31%)</title><rect x="196.4" y="755.0" width="27.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="199.4" y="766.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$parse$2 (6,247 samples, 2.31%)</title><rect x="196.4" y="739.0" width="27.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="199.4" y="750.0">o..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser.nextToken (650 samples, 0.24%)</title><rect x="196.4" y="723.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.4" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser._skipWSOrEnd (569 samples, 0.21%)</title><rect x="196.8" y="707.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="199.8" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser._loadMore (569 samples, 0.21%)</title><rect x="196.8" y="691.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="199.8" y="702.0"></text>
</g>
<g>
<title>java/io/InputStreamReader.read (563 samples, 0.21%)</title><rect x="196.8" y="675.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="199.8" y="686.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.read (556 samples, 0.21%)</title><rect x="196.8" y="659.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="199.8" y="670.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.implRead (474 samples, 0.18%)</title><rect x="197.2" y="643.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="200.2" y="654.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.decode (323 samples, 0.12%)</title><rect x="197.5" y="627.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.5" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decodeLoop (292 samples, 0.11%)</title><rect x="197.6" y="611.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.6" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decodeArrayLoop (279 samples, 0.10%)</title><rect x="197.7" y="595.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.7" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2300/876703921.apply (5,563 samples, 2.05%)</title><rect x="199.3" y="723.0" width="24.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="202.3" y="734.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$makeStructRootConverter$3 (5,563 samples, 2.05%)</title><rect x="199.3" y="707.0" width="24.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="202.3" y="718.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.parseJsonToken (5,514 samples, 2.04%)</title><rect x="199.5" y="691.0" width="24.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="202.5" y="702.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeStructRootConverter$3$1.applyOrElse (5,403 samples, 2.00%)</title><rect x="199.8" y="675.0" width="23.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="202.8" y="686.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeStructRootConverter$3$1.applyOrElse (5,403 samples, 2.00%)</title><rect x="199.8" y="659.0" width="23.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="202.8" y="670.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.org$apache$spark$sql$catalyst$json$JacksonParser$$convertObject (5,370 samples, 1.98%)</title><rect x="199.8" y="643.0" width="23.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="202.8" y="654.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2249/824941451.apply (272 samples, 0.10%)</title><rect x="200.6" y="627.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="203.6" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$makeConverter$4 (272 samples, 0.10%)</title><rect x="200.6" y="611.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="203.6" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.parseJsonToken (221 samples, 0.08%)</title><rect x="200.9" y="595.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="203.9" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$4$1.applyOrElse (120 samples, 0.04%)</title><rect x="201.3" y="579.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="204.3" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$4$1.applyOrElse (120 samples, 0.04%)</title><rect x="201.3" y="563.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="204.3" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getIntValue (82 samples, 0.03%)</title><rect x="201.3" y="547.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="204.3" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseIntValue (64 samples, 0.02%)</title><rect x="201.4" y="531.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="204.4" y="542.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2253/1492249477.apply (413 samples, 0.15%)</title><rect x="201.8" y="627.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="204.8" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$makeConverter$9 (413 samples, 0.15%)</title><rect x="201.8" y="611.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.8" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.parseJsonToken (408 samples, 0.15%)</title><rect x="201.8" y="595.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.8" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$9$1.applyOrElse (387 samples, 0.14%)</title><rect x="201.9" y="579.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="204.9" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$9$1.applyOrElse (387 samples, 0.14%)</title><rect x="201.9" y="563.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="204.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (352 samples, 0.13%)</title><rect x="201.9" y="547.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="204.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (352 samples, 0.13%)</title><rect x="201.9" y="531.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="204.9" y="542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseSlowInt (64 samples, 0.02%)</title><rect x="203.2" y="515.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="206.2" y="526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsString (61 samples, 0.02%)</title><rect x="203.2" y="499.0" width="0.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="206.2" y="510.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2257/1015140536.apply (768 samples, 0.28%)</title><rect x="203.6" y="627.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="206.6" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$makeConverter$8 (768 samples, 0.28%)</title><rect x="203.6" y="611.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="206.6" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.parseJsonToken (762 samples, 0.28%)</title><rect x="203.6" y="595.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="206.6" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$8$1.applyOrElse (707 samples, 0.26%)</title><rect x="203.9" y="579.0" width="3.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="206.9" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$8$1.applyOrElse (707 samples, 0.26%)</title><rect x="203.9" y="563.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.9" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser.getText (261 samples, 0.10%)</title><rect x="203.9" y="547.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="206.9" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsString (126 samples, 0.05%)</title><rect x="204.5" y="531.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="207.5" y="542.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/types/UTF8String.fromString (446 samples, 0.16%)</title><rect x="205.0" y="547.0" width="2.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="208.0" y="558.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (407 samples, 0.15%)</title><rect x="205.0" y="531.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="208.0" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (390 samples, 0.14%)</title><rect x="205.1" y="515.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="208.1" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.encode (61 samples, 0.02%)</title><rect x="206.0" y="499.0" width="0.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.0" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (131 samples, 0.05%)</title><rect x="206.2" y="499.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="209.2" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (103 samples, 0.04%)</title><rect x="206.3" y="483.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="209.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (103 samples, 0.04%)</title><rect x="206.3" y="467.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="209.3" y="478.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (103 samples, 0.04%)</title><rect x="206.3" y="451.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="209.3" y="462.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonUtils$.nextUntil (1,844 samples, 0.68%)</title><rect x="207.0" y="627.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="210.0" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser.nextToken (1,815 samples, 0.67%)</title><rect x="207.1" y="611.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="210.1" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser._parseUnsignedNumber (280 samples, 0.10%)</title><rect x="210.9" y="595.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="213.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser._skipComma (660 samples, 0.24%)</title><rect x="212.2" y="595.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="215.2" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JsonFilters.reset (301 samples, 0.11%)</title><rect x="215.0" y="627.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.0" y="638.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.foreach (301 samples, 0.11%)</title><rect x="215.0" y="611.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.0" y="622.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (301 samples, 0.11%)</title><rect x="215.0" y="595.0" width="1.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="218.0" y="606.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (301 samples, 0.11%)</title><rect x="215.0" y="579.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="218.0" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JsonFilters$$Lambda$2337/1910752476.apply (301 samples, 0.11%)</title><rect x="215.0" y="563.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="218.0" y="574.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JsonFilters.$anonfun$reset$1$adapted (301 samples, 0.11%)</title><rect x="215.0" y="547.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="218.0" y="558.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JsonFilters.$anonfun$reset$1 (301 samples, 0.11%)</title><rect x="215.0" y="531.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="218.0" y="542.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.foreach (301 samples, 0.11%)</title><rect x="215.0" y="515.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.0" y="526.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (301 samples, 0.11%)</title><rect x="215.0" y="499.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="218.0" y="510.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (301 samples, 0.11%)</title><rect x="215.0" y="483.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="218.0" y="494.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JsonFilters.skipRow (880 samples, 0.33%)</title><rect x="216.3" y="627.0" width="3.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="219.3" y="638.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike$WithFilter.foreach (880 samples, 0.33%)</title><rect x="216.3" y="611.0" width="3.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="219.3" y="622.0"></text>
</g>
<g>
<title>itable stub (238 samples, 0.09%)</title><rect x="218.4" y="595.0" width="1.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="221.4" y="606.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.foreach (108 samples, 0.04%)</title><rect x="219.7" y="595.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="222.7" y="606.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (108 samples, 0.04%)</title><rect x="219.7" y="579.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="222.7" y="590.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (108 samples, 0.04%)</title><rect x="219.7" y="563.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="222.7" y="574.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike$WithFilter$$Lambda$71/997033037.apply (108 samples, 0.04%)</title><rect x="219.7" y="547.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.7" y="558.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike$WithFilter.$anonfun$foreach$1 (108 samples, 0.04%)</title><rect x="219.7" y="531.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="222.7" y="542.0"></text>
</g>
<g>
<title>org/apache/spark/sql/types/StructType.getFieldIndex (684 samples, 0.25%)</title><rect x="220.2" y="627.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="223.2" y="638.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap.get (683 samples, 0.25%)</title><rect x="220.2" y="611.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="223.2" y="622.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$HashTrieMap.get0 (514 samples, 0.19%)</title><rect x="220.9" y="595.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="223.9" y="606.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$HashMap1.get0 (208 samples, 0.08%)</title><rect x="220.9" y="579.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="223.9" y="590.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals (208 samples, 0.08%)</title><rect x="220.9" y="563.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="223.9" y="574.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals2 (208 samples, 0.08%)</title><rect x="220.9" y="547.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="223.9" y="558.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equalsNumObject (172 samples, 0.06%)</title><rect x="221.1" y="531.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="224.1" y="542.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$HashTrieMap.get0 (306 samples, 0.11%)</title><rect x="221.8" y="579.0" width="1.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="224.8" y="590.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$HashMap1.get0 (306 samples, 0.11%)</title><rect x="221.8" y="563.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="224.8" y="574.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals (306 samples, 0.11%)</title><rect x="221.8" y="547.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="224.8" y="558.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals2 (306 samples, 0.11%)</title><rect x="221.8" y="531.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="224.8" y="542.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equalsNumObject (277 samples, 0.10%)</title><rect x="222.0" y="515.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.0" y="526.0"></text>
</g>
<g>
<title>java/lang/Integer.equals (104 samples, 0.04%)</title><rect x="222.7" y="499.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.7" y="510.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnaryExpression.eval (191 samples, 0.07%)</title><rect x="223.7" y="851.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="226.7" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/BoundReference.eval (170 samples, 0.06%)</title><rect x="223.8" y="835.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="226.8" y="846.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$$$Lambda$932/110503563.apply (170 samples, 0.06%)</title><rect x="223.8" y="819.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="226.8" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$.$anonfun$getAccessor$16$adapted (170 samples, 0.06%)</title><rect x="223.8" y="803.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="226.8" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$.$anonfun$getAccessor$16 (170 samples, 0.06%)</title><rect x="223.8" y="787.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="226.8" y="798.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$$$Lambda$928/1825651942.apply (170 samples, 0.06%)</title><rect x="223.8" y="771.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="226.8" y="782.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$.$anonfun$getAccessor$9$adapted (170 samples, 0.06%)</title><rect x="223.8" y="755.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="226.8" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$.$anonfun$getAccessor$9 (170 samples, 0.06%)</title><rect x="223.8" y="739.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.8" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.getBinary (170 samples, 0.06%)</title><rect x="223.8" y="723.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.8" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.isNullAt (60 samples, 0.02%)</title><rect x="223.8" y="707.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="226.8" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (93 samples, 0.03%)</title><rect x="224.1" y="707.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="227.1" y="718.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (306 samples, 0.11%)</title><rect x="224.8" y="899.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.8" y="910.0"></text>
</g>
<g>
<title>itable stub (67 samples, 0.02%)</title><rect x="224.9" y="883.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="227.9" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/InterruptibleIterator.next (199 samples, 0.07%)</title><rect x="225.2" y="883.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="228.2" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataSourceRDD$$anon$1.next (175 samples, 0.06%)</title><rect x="225.3" y="867.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.3" y="878.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/MetricsRowIterator.next (145 samples, 0.05%)</title><rect x="225.4" y="851.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="228.4" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/MetricsRowIterator.next (145 samples, 0.05%)</title><rect x="225.4" y="835.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="228.4" y="846.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/PartitionIterator.next (124 samples, 0.05%)</title><rect x="225.5" y="819.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.5" y="830.0"></text>
</g>
<g>
<title>scala/LowPriorityImplicits.wrapRefArray (96 samples, 0.04%)</title><rect x="225.6" y="803.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="228.6" y="814.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray$ofRef.&lt;init&gt; (96 samples, 0.04%)</title><rect x="225.6" y="787.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="228.6" y="798.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray.&lt;init&gt; (96 samples, 0.04%)</title><rect x="225.6" y="771.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.6" y="782.0"></text>
</g>
<g>
<title>scala/collection/mutable/AbstractSeq.&lt;init&gt; (96 samples, 0.04%)</title><rect x="225.6" y="755.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="228.6" y="766.0"></text>
</g>
<g>
<title>scala/collection/AbstractSeq.&lt;init&gt; (96 samples, 0.04%)</title><rect x="225.6" y="739.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="228.6" y="750.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterable.&lt;init&gt; (96 samples, 0.04%)</title><rect x="225.6" y="723.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="228.6" y="734.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.&lt;init&gt; (96 samples, 0.04%)</title><rect x="225.6" y="707.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="228.6" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$GeneratedIteratorForCodegenStage3.processNext (8,100 samples, 2.99%)</title><rect x="226.2" y="931.0" width="35.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="229.2" y="942.0">org..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (103 samples, 0.04%)</title><rect x="226.2" y="915.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="229.2" y="926.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (103 samples, 0.04%)</title><rect x="226.2" y="899.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.2" y="910.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (103 samples, 0.04%)</title><rect x="226.2" y="883.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="229.2" y="894.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (2,280 samples, 0.84%)</title><rect x="226.7" y="915.0" width="10.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="229.7" y="926.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.hasNext (2,278 samples, 0.84%)</title><rect x="226.7" y="899.0" width="10.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="229.7" y="910.0"></text>
</g>
<g>
<title>org/apache/spark/InterruptibleIterator.hasNext (2,260 samples, 0.83%)</title><rect x="226.8" y="883.0" width="9.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="229.8" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataSourceRDD$$anon$1.hasNext (2,235 samples, 0.83%)</title><rect x="226.9" y="867.0" width="9.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="229.9" y="878.0"></text>
</g>
<g>
<title>scala/Option.exists (2,215 samples, 0.82%)</title><rect x="227.0" y="851.0" width="9.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.0" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataSourceRDD$$anon$1$$Lambda$1394/1074031834.apply (2,212 samples, 0.82%)</title><rect x="227.0" y="835.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.0" y="846.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataSourceRDD$$anon$1.$anonfun$hasNext$1$adapted (2,212 samples, 0.82%)</title><rect x="227.0" y="819.0" width="9.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.0" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataSourceRDD$$anon$1.$anonfun$hasNext$1 (2,212 samples, 0.82%)</title><rect x="227.0" y="803.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.0" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/MetricsIterator.hasNext (2,211 samples, 0.82%)</title><rect x="227.0" y="787.0" width="9.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.0" y="798.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/PartitionIterator.hasNext (2,207 samples, 0.82%)</title><rect x="227.0" y="771.0" width="9.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="230.0" y="782.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/KafkaBatchPartitionReader.next (2,207 samples, 0.82%)</title><rect x="227.0" y="755.0" width="9.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="230.0" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/KafkaRecordToRowConverter$$Lambda$1433/1214308233.apply (517 samples, 0.19%)</title><rect x="227.2" y="739.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.2" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/KafkaRecordToRowConverter.$anonfun$toUnsafeRowWithoutHeadersProjector$1 (517 samples, 0.19%)</title><rect x="227.2" y="723.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="230.2" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (212 samples, 0.08%)</title><rect x="227.2" y="707.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="230.2" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.writeFields_0_0$ (167 samples, 0.06%)</title><rect x="227.4" y="691.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="230.4" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (167 samples, 0.06%)</title><rect x="227.4" y="675.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="230.4" y="686.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.write (88 samples, 0.03%)</title><rect x="227.4" y="659.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="230.4" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (88 samples, 0.03%)</title><rect x="227.4" y="643.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="230.4" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (63 samples, 0.02%)</title><rect x="227.5" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="230.5" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/codegen/UnsafeWriter.writeUnalignedBytes (79 samples, 0.03%)</title><rect x="227.8" y="659.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="230.8" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (79 samples, 0.03%)</title><rect x="227.8" y="643.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="230.8" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/KafkaRecordToRowConverter$$Lambda$1425/825442207.apply (305 samples, 0.11%)</title><rect x="228.1" y="707.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.1" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/KafkaRecordToRowConverter.$anonfun$toInternalRowWithoutHeaders$1 (305 samples, 0.11%)</title><rect x="228.1" y="691.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="231.1" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/types/UTF8String.fromString (109 samples, 0.04%)</title><rect x="228.3" y="675.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="231.3" y="686.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (109 samples, 0.04%)</title><rect x="228.3" y="659.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.3" y="670.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (101 samples, 0.04%)</title><rect x="228.3" y="643.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="231.3" y="654.0"></text>
</g>
<g>
<title>scala/LowPriorityImplicits.genericWrapArray (162 samples, 0.06%)</title><rect x="228.8" y="675.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="231.8" y="686.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray$.make (162 samples, 0.06%)</title><rect x="228.8" y="659.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="231.8" y="670.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray$ofRef.&lt;init&gt; (162 samples, 0.06%)</title><rect x="228.8" y="643.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="231.8" y="654.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray.&lt;init&gt; (162 samples, 0.06%)</title><rect x="228.8" y="627.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="231.8" y="638.0"></text>
</g>
<g>
<title>scala/collection/mutable/AbstractSeq.&lt;init&gt; (162 samples, 0.06%)</title><rect x="228.8" y="611.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="231.8" y="622.0"></text>
</g>
<g>
<title>scala/collection/AbstractSeq.&lt;init&gt; (162 samples, 0.06%)</title><rect x="228.8" y="595.0" width="0.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="231.8" y="606.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterable.&lt;init&gt; (162 samples, 0.06%)</title><rect x="228.8" y="579.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="231.8" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer.get (1,646 samples, 0.61%)</title><rect x="229.5" y="739.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.5" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer.runUninterruptiblyIfPossible (1,646 samples, 0.61%)</title><rect x="229.5" y="723.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.5" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/util/UninterruptibleThread.runUninterruptibly (1,646 samples, 0.61%)</title><rect x="229.5" y="707.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="232.5" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer$$Lambda$1448/1225358481.apply (1,518 samples, 0.56%)</title><rect x="230.0" y="691.0" width="6.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.0" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer.$anonfun$get$1 (1,515 samples, 0.56%)</title><rect x="230.1" y="675.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="233.1" y="686.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer.fetchRecord (1,471 samples, 0.54%)</title><rect x="230.1" y="659.0" width="6.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="233.1" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/KafkaDataConsumer.fetchData (1,405 samples, 0.52%)</title><rect x="230.4" y="643.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="233.4" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/InternalKafkaConsumer.fetch (1,404 samples, 0.52%)</title><rect x="230.4" y="627.0" width="6.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.4" y="638.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (705 samples, 0.26%)</title><rect x="230.4" y="611.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="233.4" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.poll (705 samples, 0.26%)</title><rect x="230.4" y="595.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="233.4" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.pollForFetches (660 samples, 0.24%)</title><rect x="230.5" y="579.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="233.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchedRecords (659 samples, 0.24%)</title><rect x="230.5" y="563.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="233.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.fetchRecords (659 samples, 0.24%)</title><rect x="230.5" y="547.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.5" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.access$1700 (633 samples, 0.23%)</title><rect x="230.5" y="531.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="233.5" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.fetchRecords (633 samples, 0.23%)</title><rect x="230.5" y="515.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.5" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.nextFetchedRecord (490 samples, 0.18%)</title><rect x="230.5" y="499.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="233.5" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$CompletedFetch.maybeEnsureValid (253 samples, 0.09%)</title><rect x="230.6" y="483.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="233.6" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.ensureValid (253 samples, 0.09%)</title><rect x="230.6" y="467.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.6" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.isValid (253 samples, 0.09%)</title><rect x="230.6" y="451.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="233.6" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch.computeChecksum (253 samples, 0.09%)</title><rect x="230.6" y="435.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="233.6" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Crc32C.compute (253 samples, 0.09%)</title><rect x="230.6" y="419.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="233.6" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/Checksums.update (253 samples, 0.09%)</title><rect x="230.6" y="403.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="233.6" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/PureJavaCrc32C.update (252 samples, 0.09%)</title><rect x="230.6" y="387.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="233.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (73 samples, 0.03%)</title><rect x="231.7" y="483.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="234.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$RecordIterator.next (71 samples, 0.03%)</title><rect x="231.7" y="467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="234.7" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecordBatch$3.readNext (71 samples, 0.03%)</title><rect x="231.7" y="451.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="234.7" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/record/DefaultRecord.readFrom (71 samples, 0.03%)</title><rect x="231.7" y="435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.7" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$3400 (134 samples, 0.05%)</title><rect x="232.6" y="499.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="235.6" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.parseRecord (129 samples, 0.05%)</title><rect x="232.7" y="483.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="235.7" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.maybeLeaderEpoch (129 samples, 0.05%)</title><rect x="232.7" y="467.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="235.7" y="478.0"></text>
</g>
<g>
<title>java/util/Optional.of (129 samples, 0.05%)</title><rect x="232.7" y="451.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="235.7" y="462.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/InternalKafkaConsumer.getAvailableOffsetRange (630 samples, 0.23%)</title><rect x="233.5" y="611.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.5" y="622.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.position (593 samples, 0.22%)</title><rect x="233.5" y="595.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="236.5" y="606.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.position (593 samples, 0.22%)</title><rect x="233.5" y="579.0" width="2.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="236.5" y="590.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/KafkaConsumer.updateFetchPositions (81 samples, 0.03%)</title><rect x="233.5" y="563.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.5" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (506 samples, 0.19%)</title><rect x="233.9" y="563.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="236.9" y="574.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (506 samples, 0.19%)</title><rect x="233.9" y="547.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="236.9" y="558.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.poll (506 samples, 0.19%)</title><rect x="233.9" y="531.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.9" y="542.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/NetworkClient.poll (322 samples, 0.12%)</title><rect x="233.9" y="515.0" width="1.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="236.9" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.poll (271 samples, 0.10%)</title><rect x="234.1" y="499.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.1" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.pollSelectionKeys (177 samples, 0.07%)</title><rect x="234.3" y="483.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="237.3" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/Selector.attemptRead (125 samples, 0.05%)</title><rect x="234.4" y="467.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="237.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.read (98 samples, 0.04%)</title><rect x="234.4" y="451.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="237.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/KafkaChannel.receive (97 samples, 0.04%)</title><rect x="234.4" y="435.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="237.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/NetworkReceive.readFrom (96 samples, 0.04%)</title><rect x="234.4" y="419.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="237.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/common/network/PlaintextTransportLayer.read (60 samples, 0.02%)</title><rect x="234.6" y="403.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.6" y="414.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (59 samples, 0.02%)</title><rect x="234.6" y="387.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="237.6" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.firePendingCompletedRequests (118 samples, 0.04%)</title><rect x="235.4" y="515.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="238.4" y="526.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient$RequestFutureCompletionHandler.fireCompletion (116 samples, 0.04%)</title><rect x="235.4" y="499.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.4" y="510.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (116 samples, 0.04%)</title><rect x="235.4" y="483.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="238.4" y="494.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (115 samples, 0.04%)</title><rect x="235.4" y="467.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="238.4" y="478.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture$1.onSuccess (110 samples, 0.04%)</title><rect x="235.4" y="451.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="238.4" y="462.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$5.onSuccess (110 samples, 0.04%)</title><rect x="235.4" y="435.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="238.4" y="446.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$5.onSuccess (110 samples, 0.04%)</title><rect x="235.4" y="419.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.4" y="430.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.access$2800 (110 samples, 0.04%)</title><rect x="235.4" y="403.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="238.4" y="414.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.handleListOffsetResponse (109 samples, 0.04%)</title><rect x="235.4" y="387.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="238.4" y="398.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.complete (104 samples, 0.04%)</title><rect x="235.4" y="371.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="238.4" y="382.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/RequestFuture.fireSuccess (103 samples, 0.04%)</title><rect x="235.4" y="355.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.4" y="366.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$2.onSuccess (101 samples, 0.04%)</title><rect x="235.4" y="339.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.4" y="350.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher$2.onSuccess (101 samples, 0.04%)</title><rect x="235.4" y="323.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="238.4" y="334.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/Fetcher.resetOffsetIfNeeded (101 samples, 0.04%)</title><rect x="235.4" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.4" y="318.0"></text>
</g>
<g>
<title>org/apache/kafka/clients/consumer/internals/SubscriptionState.maybeSeekUnvalidated (96 samples, 0.04%)</title><rect x="235.5" y="291.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="238.5" y="302.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.info (91 samples, 0.03%)</title><rect x="235.5" y="275.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="238.5" y="286.0"></text>
</g>
<g>
<title>org/apache/kafka/common/utils/LogContext$LocationAwareKafkaLogger.writeLog (90 samples, 0.03%)</title><rect x="235.5" y="259.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="238.5" y="270.0"></text>
</g>
<g>
<title>org/apache/spark/sql/kafka010/consumer/InternalKafkaConsumer.seek (60 samples, 0.02%)</title><rect x="236.3" y="611.0" width="0.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="239.3" y="622.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (5,694 samples, 2.10%)</title><rect x="236.7" y="915.0" width="24.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="239.7" y="926.0">s..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (5,528 samples, 2.04%)</title><rect x="236.7" y="899.0" width="24.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="239.7" y="910.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/GeneratedClass$SpecificUnsafeProjection.apply (5,526 samples, 2.04%)</title><rect x="236.7" y="883.0" width="24.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="239.7" y="894.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnaryExpression.eval (5,362 samples, 1.98%)</title><rect x="237.3" y="867.0" width="23.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.3" y="878.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs.nullSafeEval (5,269 samples, 1.95%)</title><rect x="237.3" y="851.0" width="23.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="240.3" y="862.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/util/FailureSafeParser.parse (5,222 samples, 1.93%)</title><rect x="237.5" y="835.0" width="22.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.5" y="846.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs$$Lambda$2318/1776878183.apply (5,222 samples, 1.93%)</title><rect x="237.5" y="819.0" width="22.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="240.5" y="830.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs.$anonfun$parser$3 (5,222 samples, 1.93%)</title><rect x="237.5" y="803.0" width="22.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="240.5" y="814.0">o..</text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.parse (5,222 samples, 1.93%)</title><rect x="237.5" y="787.0" width="22.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.5" y="798.0">o..</text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithResource (5,222 samples, 1.93%)</title><rect x="237.5" y="771.0" width="22.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="240.5" y="782.0">o..</text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.close (94 samples, 0.03%)</title><rect x="237.6" y="755.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="240.6" y="766.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser._closeInput (85 samples, 0.03%)</title><rect x="237.6" y="739.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.6" y="750.0"></text>
</g>
<g>
<title>java/io/InputStreamReader.close (85 samples, 0.03%)</title><rect x="237.6" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="240.6" y="734.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.close (85 samples, 0.03%)</title><rect x="237.6" y="707.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="240.6" y="718.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.implClose (66 samples, 0.02%)</title><rect x="237.7" y="691.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="240.7" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2329/545051148.apply (1,847 samples, 0.68%)</title><rect x="238.0" y="755.0" width="8.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.0" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$parse$1 (1,847 samples, 0.68%)</title><rect x="238.0" y="739.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="241.0" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs$$Lambda$2316/954903303.apply (1,847 samples, 0.68%)</title><rect x="238.0" y="723.0" width="8.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="241.0" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/JsonToStructs.$anonfun$parser$2 (1,847 samples, 0.68%)</title><rect x="238.0" y="707.0" width="8.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="241.0" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/CreateJacksonParser$.utf8String (1,833 samples, 0.68%)</title><rect x="238.1" y="691.0" width="7.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="241.1" y="702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory.createParser (534 samples, 0.20%)</title><rect x="243.7" y="675.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="246.7" y="686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createContext (68 samples, 0.03%)</title><rect x="244.4" y="659.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.4" y="670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._getBufferRecycler (68 samples, 0.03%)</title><rect x="244.4" y="643.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.4" y="654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/BufferRecyclers.getBufferRecycler (68 samples, 0.03%)</title><rect x="244.4" y="627.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.4" y="638.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (68 samples, 0.03%)</title><rect x="244.4" y="611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.4" y="622.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.access$000 (68 samples, 0.03%)</title><rect x="244.4" y="595.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.4" y="606.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (68 samples, 0.03%)</title><rect x="244.4" y="579.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="247.4" y="590.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntryAfterMiss (68 samples, 0.03%)</title><rect x="244.4" y="563.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="247.4" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (68 samples, 0.03%)</title><rect x="244.4" y="547.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="247.4" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/JsonFactory._createParser (304 samples, 0.11%)</title><rect x="244.7" y="659.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="247.7" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2332/613359898.apply (3,259 samples, 1.20%)</title><rect x="246.0" y="755.0" width="14.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.0" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$parse$2 (3,259 samples, 1.20%)</title><rect x="246.0" y="739.0" width="14.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="249.0" y="750.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser.nextToken (381 samples, 0.14%)</title><rect x="246.0" y="723.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="249.0" y="734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser._skipWSOrEnd (337 samples, 0.12%)</title><rect x="246.2" y="707.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="249.2" y="718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser._loadMore (337 samples, 0.12%)</title><rect x="246.2" y="691.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.2" y="702.0"></text>
</g>
<g>
<title>java/io/InputStreamReader.read (335 samples, 0.12%)</title><rect x="246.2" y="675.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="249.2" y="686.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.read (332 samples, 0.12%)</title><rect x="246.3" y="659.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="249.3" y="670.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamDecoder.implRead (288 samples, 0.11%)</title><rect x="246.5" y="643.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="249.5" y="654.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetDecoder.decode (209 samples, 0.08%)</title><rect x="246.6" y="627.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="249.6" y="638.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decodeLoop (201 samples, 0.07%)</title><rect x="246.7" y="611.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="249.7" y="622.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Decoder.decodeArrayLoop (193 samples, 0.07%)</title><rect x="246.7" y="595.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="249.7" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2300/876703921.apply (2,863 samples, 1.06%)</title><rect x="247.7" y="723.0" width="12.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="250.7" y="734.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$makeStructRootConverter$3 (2,863 samples, 1.06%)</title><rect x="247.7" y="707.0" width="12.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="250.7" y="718.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.parseJsonToken (2,840 samples, 1.05%)</title><rect x="247.8" y="691.0" width="12.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="250.8" y="702.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeStructRootConverter$3$1.applyOrElse (2,773 samples, 1.02%)</title><rect x="248.0" y="675.0" width="12.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="251.0" y="686.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeStructRootConverter$3$1.applyOrElse (2,773 samples, 1.02%)</title><rect x="248.0" y="659.0" width="12.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="251.0" y="670.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.org$apache$spark$sql$catalyst$json$JacksonParser$$convertObject (2,744 samples, 1.01%)</title><rect x="248.1" y="643.0" width="11.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="251.1" y="654.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2249/824941451.apply (131 samples, 0.05%)</title><rect x="248.4" y="627.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="251.4" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$makeConverter$4 (131 samples, 0.05%)</title><rect x="248.4" y="611.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.4" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.parseJsonToken (107 samples, 0.04%)</title><rect x="248.5" y="595.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="251.5" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$4$1.applyOrElse (69 samples, 0.03%)</title><rect x="248.7" y="579.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="251.7" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$4$1.applyOrElse (69 samples, 0.03%)</title><rect x="248.7" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="251.7" y="574.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2253/1492249477.apply (214 samples, 0.08%)</title><rect x="249.0" y="627.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="252.0" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$makeConverter$9 (214 samples, 0.08%)</title><rect x="249.0" y="611.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.0" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.parseJsonToken (213 samples, 0.08%)</title><rect x="249.0" y="595.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="252.0" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$9$1.applyOrElse (201 samples, 0.07%)</title><rect x="249.0" y="579.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="252.0" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$9$1.applyOrElse (201 samples, 0.07%)</title><rect x="249.0" y="563.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="252.0" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase.getLongValue (191 samples, 0.07%)</title><rect x="249.0" y="547.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="252.0" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/base/ParserBase._parseNumericValue (191 samples, 0.07%)</title><rect x="249.0" y="531.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="252.0" y="542.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$Lambda$2257/1015140536.apply (415 samples, 0.15%)</title><rect x="249.9" y="627.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="252.9" y="638.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.$anonfun$makeConverter$8 (415 samples, 0.15%)</title><rect x="249.9" y="611.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="252.9" y="622.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser.parseJsonToken (410 samples, 0.15%)</title><rect x="249.9" y="595.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="252.9" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$8$1.applyOrElse (373 samples, 0.14%)</title><rect x="250.1" y="579.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.1" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonParser$$anonfun$$nestedInanonfun$makeConverter$8$1.applyOrElse (373 samples, 0.14%)</title><rect x="250.1" y="563.0" width="1.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="253.1" y="574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser.getText (136 samples, 0.05%)</title><rect x="250.1" y="547.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="253.1" y="558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/util/TextBuffer.contentsAsString (60 samples, 0.02%)</title><rect x="250.4" y="531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="253.4" y="542.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/types/UTF8String.fromString (237 samples, 0.09%)</title><rect x="250.7" y="547.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="253.7" y="558.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (205 samples, 0.08%)</title><rect x="250.7" y="531.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="253.7" y="542.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (194 samples, 0.07%)</title><rect x="250.7" y="515.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="253.7" y="526.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8.newEncoder (77 samples, 0.03%)</title><rect x="251.3" y="499.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="254.3" y="510.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (62 samples, 0.02%)</title><rect x="251.3" y="483.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="254.3" y="494.0"></text>
</g>
<g>
<title>sun/nio/cs/UTF_8$Encoder.&lt;init&gt; (62 samples, 0.02%)</title><rect x="251.3" y="467.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="254.3" y="478.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.&lt;init&gt; (62 samples, 0.02%)</title><rect x="251.3" y="451.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="254.3" y="462.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JacksonUtils$.nextUntil (976 samples, 0.36%)</title><rect x="251.7" y="627.0" width="4.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="254.7" y="638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser.nextToken (955 samples, 0.35%)</title><rect x="251.8" y="611.0" width="4.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="254.8" y="622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser._parseUnsignedNumber (155 samples, 0.06%)</title><rect x="253.9" y="595.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.9" y="606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/core/json/ReaderBasedJsonParser._skipComma (335 samples, 0.12%)</title><rect x="254.5" y="595.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="257.5" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JsonFilters.reset (181 samples, 0.07%)</title><rect x="256.0" y="627.0" width="0.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.0" y="638.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.foreach (181 samples, 0.07%)</title><rect x="256.0" y="611.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.0" y="622.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (181 samples, 0.07%)</title><rect x="256.0" y="595.0" width="0.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="259.0" y="606.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (181 samples, 0.07%)</title><rect x="256.0" y="579.0" width="0.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="259.0" y="590.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JsonFilters$$Lambda$2337/1910752476.apply (181 samples, 0.07%)</title><rect x="256.0" y="563.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="259.0" y="574.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JsonFilters.$anonfun$reset$1$adapted (181 samples, 0.07%)</title><rect x="256.0" y="547.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="259.0" y="558.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JsonFilters.$anonfun$reset$1 (181 samples, 0.07%)</title><rect x="256.0" y="531.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="259.0" y="542.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.foreach (181 samples, 0.07%)</title><rect x="256.0" y="515.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.0" y="526.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (181 samples, 0.07%)</title><rect x="256.0" y="499.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="259.0" y="510.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (181 samples, 0.07%)</title><rect x="256.0" y="483.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="259.0" y="494.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/json/JsonFilters.skipRow (442 samples, 0.16%)</title><rect x="256.8" y="627.0" width="1.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="259.8" y="638.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike$WithFilter.foreach (442 samples, 0.16%)</title><rect x="256.8" y="611.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="259.8" y="622.0"></text>
</g>
<g>
<title>itable stub (117 samples, 0.04%)</title><rect x="257.8" y="595.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="260.8" y="606.0"></text>
</g>
<g>
<title>org/apache/spark/sql/types/StructType.getFieldIndex (301 samples, 0.11%)</title><rect x="258.7" y="627.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="261.7" y="638.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap.get (301 samples, 0.11%)</title><rect x="258.7" y="611.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="261.7" y="622.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$HashTrieMap.get0 (219 samples, 0.08%)</title><rect x="259.1" y="595.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="262.1" y="606.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$HashMap1.get0 (120 samples, 0.04%)</title><rect x="259.1" y="579.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="262.1" y="590.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals (120 samples, 0.04%)</title><rect x="259.1" y="563.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.1" y="574.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals2 (120 samples, 0.04%)</title><rect x="259.1" y="547.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="262.1" y="558.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equalsNumObject (87 samples, 0.03%)</title><rect x="259.2" y="531.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.2" y="542.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$HashTrieMap.get0 (99 samples, 0.04%)</title><rect x="259.6" y="579.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="262.6" y="590.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$HashMap1.get0 (99 samples, 0.04%)</title><rect x="259.6" y="563.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="262.6" y="574.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals (99 samples, 0.04%)</title><rect x="259.6" y="547.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="262.6" y="558.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals2 (99 samples, 0.04%)</title><rect x="259.6" y="531.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="262.6" y="542.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equalsNumObject (99 samples, 0.04%)</title><rect x="259.6" y="515.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="262.6" y="526.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnaryExpression.eval (79 samples, 0.03%)</title><rect x="260.3" y="851.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="263.3" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/BoundReference.eval (69 samples, 0.03%)</title><rect x="260.3" y="835.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="263.3" y="846.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$$$Lambda$932/110503563.apply (69 samples, 0.03%)</title><rect x="260.3" y="819.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="263.3" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$.$anonfun$getAccessor$16$adapted (69 samples, 0.03%)</title><rect x="260.3" y="803.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="263.3" y="814.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$.$anonfun$getAccessor$16 (69 samples, 0.03%)</title><rect x="260.3" y="787.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="263.3" y="798.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$$$Lambda$928/1825651942.apply (69 samples, 0.03%)</title><rect x="260.3" y="771.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="263.3" y="782.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$.$anonfun$getAccessor$9$adapted (69 samples, 0.03%)</title><rect x="260.3" y="755.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="263.3" y="766.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/InternalRow$.$anonfun$getAccessor$9 (69 samples, 0.03%)</title><rect x="260.3" y="739.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="263.3" y="750.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.getBinary (69 samples, 0.03%)</title><rect x="260.3" y="723.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="263.3" y="734.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (158 samples, 0.06%)</title><rect x="260.8" y="899.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="263.8" y="910.0"></text>
</g>
<g>
<title>org/apache/spark/InterruptibleIterator.next (98 samples, 0.04%)</title><rect x="261.0" y="883.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="264.0" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/DataSourceRDD$$anon$1.next (80 samples, 0.03%)</title><rect x="261.1" y="867.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="264.1" y="878.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/MetricsRowIterator.next (66 samples, 0.02%)</title><rect x="261.1" y="851.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="264.1" y="862.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/datasources/v2/MetricsRowIterator.next (66 samples, 0.02%)</title><rect x="261.1" y="835.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="264.1" y="846.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (730 samples, 0.27%)</title><rect x="261.5" y="995.0" width="3.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="264.5" y="1006.0"></text>
</g>
<g>
<title>itable stub (85 samples, 0.03%)</title><rect x="261.6" y="979.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="264.6" y="990.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/exchange/ShuffleExchangeExec$$$Lambda$1390/1022989045.apply (365 samples, 0.13%)</title><rect x="262.0" y="979.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="265.0" y="990.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/exchange/ShuffleExchangeExec$.$anonfun$prepareShuffleDependency$12 (365 samples, 0.13%)</title><rect x="262.0" y="963.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="265.0" y="974.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.copy (286 samples, 0.11%)</title><rect x="262.0" y="947.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="265.0" y="958.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/expressions/UnsafeRow.copy (286 samples, 0.11%)</title><rect x="262.0" y="931.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="265.0" y="942.0"></text>
</g>
<g>
<title>org/apache/spark/unsafe/Platform.copyMemory (286 samples, 0.11%)</title><rect x="262.0" y="915.0" width="1.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="265.0" y="926.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/exchange/ShuffleExchangeExec$$$Lambda$1386/400206102.apply (79 samples, 0.03%)</title><rect x="263.3" y="947.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="266.3" y="958.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/exchange/ShuffleExchangeExec$.$anonfun$prepareShuffleDependency$6$adapted (79 samples, 0.03%)</title><rect x="263.3" y="931.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="266.3" y="942.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/exchange/ShuffleExchangeExec$.$anonfun$prepareShuffleDependency$6 (79 samples, 0.03%)</title><rect x="263.3" y="915.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="266.3" y="926.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$10.next (238 samples, 0.09%)</title><rect x="263.7" y="979.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="266.7" y="990.0"></text>
</g>
<g>
<title>itable stub (63 samples, 0.02%)</title><rect x="263.8" y="963.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="266.8" y="974.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/EventTimeWatermarkExec$$Lambda$1356/909392341.apply (88 samples, 0.03%)</title><rect x="264.3" y="963.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="267.3" y="974.0"></text>
</g>
<g>
<title>org/apache/spark/sql/execution/streaming/EventTimeWatermarkExec.$anonfun$doExecute$2 (70 samples, 0.03%)</title><rect x="264.4" y="947.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.4" y="958.0"></text>
</g>
<g>
<title>org/apache/spark/shuffle/celeborn/RssShuffleManager.getWriter (133 samples, 0.05%)</title><rect x="264.7" y="1027.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="267.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/spark/shuffle/celeborn/HashBasedShuffleWriter.&lt;init&gt; (133 samples, 0.05%)</title><rect x="264.7" y="1011.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="267.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/write/DataPusher.&lt;init&gt; (129 samples, 0.05%)</title><rect x="264.7" y="995.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="267.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/write/PushTask.&lt;init&gt; (88 samples, 0.03%)</title><rect x="264.9" y="979.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="267.9" y="990.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/util/concurrent/FastThreadLocalRunnable.run (391 samples, 0.14%)</title><rect x="265.4" y="1203.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.4" y="1214.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/util/internal/ThreadExecutorMap$2.run (391 samples, 0.14%)</title><rect x="265.4" y="1187.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="268.4" y="1198.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/util/concurrent/SingleThreadEventExecutor$4.run (388 samples, 0.14%)</title><rect x="265.4" y="1171.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="268.4" y="1182.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/nio/NioEventLoop.run (388 samples, 0.14%)</title><rect x="265.4" y="1155.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="268.4" y="1166.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/nio/NioEventLoop.processSelectedKeys (121 samples, 0.04%)</title><rect x="265.4" y="1139.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="268.4" y="1150.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/nio/NioEventLoop.processSelectedKeysOptimized (110 samples, 0.04%)</title><rect x="265.5" y="1123.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="268.5" y="1134.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/nio/NioEventLoop.processSelectedKey (109 samples, 0.04%)</title><rect x="265.5" y="1107.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="268.5" y="1118.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.read (109 samples, 0.04%)</title><rect x="265.5" y="1091.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="268.5" y="1102.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks (192 samples, 0.07%)</title><rect x="266.2" y="1139.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.2" y="1150.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/util/concurrent/AbstractEventExecutor.safeExecute (185 samples, 0.07%)</title><rect x="266.2" y="1123.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="269.2" y="1134.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/util/concurrent/AbstractEventExecutor.runTask (185 samples, 0.07%)</title><rect x="266.2" y="1107.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="269.2" y="1118.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannelHandlerContext$WriteTask.run (184 samples, 0.07%)</title><rect x="266.2" y="1091.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.2" y="1102.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (182 samples, 0.07%)</title><rect x="266.2" y="1075.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="269.2" y="1086.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (105 samples, 0.04%)</title><rect x="266.2" y="1059.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="269.2" y="1070.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/ChannelDuplexHandler.flush (103 samples, 0.04%)</title><rect x="266.2" y="1043.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.2" y="1054.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannelHandlerContext.flush (103 samples, 0.04%)</title><rect x="266.2" y="1027.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.2" y="1038.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannelHandlerContext.invokeFlush (98 samples, 0.04%)</title><rect x="266.3" y="1011.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.3" y="1022.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (98 samples, 0.04%)</title><rect x="266.3" y="995.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="269.3" y="1006.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/DefaultChannelPipeline$HeadContext.flush (98 samples, 0.04%)</title><rect x="266.3" y="979.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="269.3" y="990.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannel$AbstractUnsafe.flush (98 samples, 0.04%)</title><rect x="266.3" y="963.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="269.3" y="974.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.flush0 (97 samples, 0.04%)</title><rect x="266.3" y="947.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="269.3" y="958.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (97 samples, 0.04%)</title><rect x="266.3" y="931.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.3" y="942.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/socket/nio/NioSocketChannel.doWrite (96 samples, 0.04%)</title><rect x="266.3" y="915.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="269.3" y="926.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/nio/AbstractNioByteChannel.doWrite0 (95 samples, 0.04%)</title><rect x="266.3" y="899.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="269.3" y="910.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/nio/AbstractNioByteChannel.doWriteInternal (95 samples, 0.04%)</title><rect x="266.3" y="883.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="269.3" y="894.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/socket/nio/NioSocketChannel.doWriteFileRegion (66 samples, 0.02%)</title><rect x="266.4" y="867.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="269.4" y="878.0"></text>
</g>
<g>
<title>org/apache/celeborn/common/network/protocol/MessageWithHeader.transferTo (66 samples, 0.02%)</title><rect x="266.4" y="851.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.4" y="862.0"></text>
</g>
<g>
<title>org/apache/celeborn/common/network/protocol/MessageWithHeader.copyByteBuf (66 samples, 0.02%)</title><rect x="266.4" y="835.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="269.4" y="846.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (74 samples, 0.03%)</title><rect x="266.7" y="1059.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.7" y="1070.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/handler/timeout/IdleStateHandler.write (72 samples, 0.03%)</title><rect x="266.7" y="1043.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="269.7" y="1054.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannelHandlerContext.write (68 samples, 0.03%)</title><rect x="266.7" y="1027.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="269.7" y="1038.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannelHandlerContext.write (68 samples, 0.03%)</title><rect x="266.7" y="1011.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="269.7" y="1022.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannelHandlerContext.invokeWrite (62 samples, 0.02%)</title><rect x="266.7" y="995.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="269.7" y="1006.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (62 samples, 0.02%)</title><rect x="266.7" y="979.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="269.7" y="990.0"></text>
</g>
<g>
<title>org/apache/celeborn/shaded/io/netty/handler/codec/MessageToMessageEncoder.write (61 samples, 0.02%)</title><rect x="266.7" y="963.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="269.7" y="974.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/write/DataPusher$1.run (211,712 samples, 78.20%)</title><rect x="267.1" y="1219.0" width="922.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="270.1" y="1230.0">org/apache/celeborn/client/write/DataPusher$1.run</text>
</g>
<g>
<title>org/apache/celeborn/client/write/DataPushQueue.takePushTask (211,081 samples, 77.97%)</title><rect x="267.2" y="1203.0" width="920.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="270.2" y="1214.0">org/apache/celeborn/client/write/DataPushQueue.takePushTask</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.iterator (132,035 samples, 48.77%)</title><rect x="594.5" y="1187.0" width="575.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="597.5" y="1198.0">java/util/concurrent/LinkedBlockingQueue.iterator</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Itr.&lt;init&gt; (132,014 samples, 48.76%)</title><rect x="594.6" y="1171.0" width="575.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="597.6" y="1182.0">java/util/concurrent/LinkedBlockingQueue$Itr.&lt;init&gt;</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.fullyLock (99,407 samples, 36.72%)</title><rect x="594.6" y="1155.0" width="433.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="597.6" y="1166.0">java/util/concurrent/LinkedBlockingQueue.fullyLock</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (99,407 samples, 36.72%)</title><rect x="594.6" y="1139.0" width="433.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="597.6" y="1150.0">java/util/concurrent/locks/ReentrantLock.lock</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (87,972 samples, 32.49%)</title><rect x="644.4" y="1123.0" width="383.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.4" y="1134.0">java/util/concurrent/locks/ReentrantLock$NonfairSync..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (83,542 samples, 30.86%)</title><rect x="663.7" y="1107.0" width="364.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.7" y="1118.0">java/util/concurrent/locks/AbstractQueuedSynchroni..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.fullyUnlock (32,607 samples, 12.04%)</title><rect x="1027.8" y="1155.0" width="142.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1030.8" y="1166.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (32,607 samples, 12.04%)</title><rect x="1027.8" y="1139.0" width="142.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1030.8" y="1150.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (32,607 samples, 12.04%)</title><rect x="1027.8" y="1123.0" width="142.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1030.8" y="1134.0">java/util/concurre..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.lock (3,938 samples, 1.45%)</title><rect x="1170.0" y="1187.0" width="17.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1173.0" y="1198.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/write/DataPusher.access$500 (622 samples, 0.23%)</title><rect x="1187.2" y="1203.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1190.2" y="1214.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/write/DataPusher.pushData (622 samples, 0.23%)</title><rect x="1187.2" y="1187.0" width="2.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1190.2" y="1198.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/ShuffleClientImpl.pushData (614 samples, 0.23%)</title><rect x="1187.2" y="1171.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1190.2" y="1182.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/ShuffleClientImpl.pushOrMergeData (614 samples, 0.23%)</title><rect x="1187.2" y="1155.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1190.2" y="1166.0"></text>
</g>
<g>
<title>org/apache/celeborn/client/compress/RssLz4Compressor.compress (542 samples, 0.20%)</title><rect x="1187.3" y="1139.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1190.3" y="1150.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4Compressor.compress (456 samples, 0.17%)</title><rect x="1187.3" y="1123.0" width="2.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1190.3" y="1134.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JNICompressor.compress (456 samples, 0.17%)</title><rect x="1187.3" y="1107.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1190.3" y="1118.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JNI.LZ4_compress_limitedOutput (456 samples, 0.17%)</title><rect x="1187.3" y="1091.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1190.3" y="1102.0"></text>
</g>
<g>
<title>LZ4_compress_fast_extState (427 samples, 0.16%)</title><rect x="1187.4" y="1075.0" width="1.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1190.4" y="1086.0"></text>
</g>
<g>
<title>net/jpountz/xxhash/StreamingXXHash32$1.update (72 samples, 0.03%)</title><rect x="1189.3" y="1123.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1192.3" y="1134.0"></text>
</g>
<g>
<title>net/jpountz/xxhash/StreamingXXHash32JNI.update (72 samples, 0.03%)</title><rect x="1189.3" y="1107.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1192.3" y="1118.0"></text>
</g>
<g>
<title>net/jpountz/xxhash/XXHashJNI.XXH32_update (70 samples, 0.03%)</title><rect x="1189.3" y="1091.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1192.3" y="1102.0"></text>
</g>
<g>
<title>XXH32_update (65 samples, 0.02%)</title><rect x="1189.3" y="1075.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1192.3" y="1086.0"></text>
</g>
</g>
</svg>
